Index: app/src/main/java/com/dev/frequenc/ui_codes/screens/booking_process/booking_history/BookingHistoryFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dev.frequenc.ui_codes.screens.booking_process.booking_history\r\n\r\nimport android.app.Activity\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.dev.frequenc.R\r\nimport com.dev.frequenc.databinding.FragmentBookingHistoryBinding\r\nimport com.dev.frequenc.ui_codes.MainActivity\r\nimport com.dev.frequenc.ui_codes.data.models.TicketDetailsModel\r\nimport com.dev.frequenc.ui_codes.screens.Dashboard.wallet.WalletFragment\r\nimport com.dev.frequenc.ui_codes.screens.Dashboard.wallet.WalletViewModel\r\nimport com.dev.frequenc.ui_codes.screens.booking_process.tickets.ShowTicketFragment\r\nimport com.dev.frequenc.ui_codes.screens.utils.ApiClient\r\nimport com.dev.frequenc.ui_codes.screens.utils.KeysConstant\r\nimport com.dev.frequenc.util.Constants\r\nimport com.dev.frequenc.util.ItemClickListener\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport io.metamask.androidsdk.ErrorType\r\nimport io.metamask.androidsdk.RequestError\r\nimport io.metamask.androidsdk.TAG\r\n\r\n@AndroidEntryPoint\r\nclass BookingHistoryFragment : Fragment(), ItemClickListener {\r\n    private lateinit var currentActivity: MainActivity\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n    private lateinit var bookinghistoryViewModel: BookingHistoryViewModel\r\n    private lateinit var binding: FragmentBookingHistoryBinding\r\n    private lateinit var walletViewModel: WalletViewModel\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n        binding = FragmentBookingHistoryBinding.inflate(layoutInflater, container, false)\r\n        bookinghistoryViewModel = ViewModelProvider(this)[BookingHistoryViewModel::class.java]\r\n        try {\r\n            walletViewModel =\r\n                ViewModelProvider(activity as MainActivity)[WalletViewModel::class.java]\r\n        } catch (ex: Exception) {\r\n            ex.printStackTrace()\r\n        }\r\n        return binding.root\r\n    }\r\n\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        if (context is Activity) {\r\n            currentActivity = context as MainActivity\r\n        } else {\r\n            try {\r\n                currentActivity = this.requireActivity() as MainActivity\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        sharedPreferences =\r\n            currentActivity.getSharedPreferences(Constants.SharedPreference, Context.MODE_PRIVATE)\r\n\r\n        binding.headerLays.btnBack.setOnClickListener {\r\n            try {\r\n                currentActivity.let { requireActivity().supportFragmentManager.popBackStack() }\r\n            } catch (ex: Exception) {\r\n                ex.printStackTrace()\r\n            }\r\n        }\r\n//\r\n//        currentActivity.runOnUiThread {\r\n//            try {\r\n//                if (currentActivity is MainActivity) {\r\n//                    walletViewModel.connectedVals.observe(viewLifecycleOwner) {\r\n//                        if (!it) {\r\n//                            var fragment: Fragment? =\r\n//                                currentActivity.supportFragmentManager?.findFragmentByTag(\"WalletFragment\")\r\n//                            var walletFragment: WalletFragment\r\n//                            if (fragment != null) {\r\n//                                walletFragment = fragment as WalletFragment\r\n//                            } else {\r\n//                                walletFragment = WalletFragment()\r\n//                            }\r\n////                    currentActivity?.supportFragmentManager?.beginTransaction()\r\n////                        ?.replace(R.id.flFragment, walletFragment, \"WalletFragment\")\r\n////                        ?.commit()\r\n//                            try {\r\n//                                startActivity(\r\n//                                    Intent(\r\n//                                        activity,\r\n//                                        com.dev.frequenc.MainActivity::class.java\r\n//                                    )\r\n//                                )\r\n//                            } catch (ex: Exception) {\r\n//                                ex.printStackTrace()\r\n//                            }\r\n//                        } else {\r\n//                            walletViewModel.getBalence { result ->\r\n//                                if (result is RequestError) {\r\n//                                    if (result.code.equals(ErrorType.UNAUTHORISED_REQUEST.code)) {\r\n////                                        var fragment: Fragment? =\r\n////                                            currentActivity.supportFragmentManager?.findFragmentByTag(\"WalletFragment\")\r\n////                                        var walletFragment: WalletFragment\r\n////                                        if (fragment != null) {\r\n////                                            walletFragment = fragment as WalletFragment\r\n////                                        } else {\r\n////                                            walletFragment = WalletFragment()\r\n////                                        }\r\n////                                        currentActivity?.supportFragmentManager?.beginTransaction()\r\n////                                            ?.replace(R.id.flFragment, walletFragment, \"WalletFragment\")\r\n////                                            ?.commit()\r\n//                                        try {\r\n//                                            startActivity(\r\n//                                                Intent(\r\n//                                                    activity,\r\n//                                                    com.dev.frequenc.MainActivity::class.java\r\n//                                                )\r\n//                                            )\r\n//                                        } catch (ex: Exception) {\r\n//                                            ex.printStackTrace()\r\n//\r\n//                                        }\r\n//                                    }\r\n//                                    Log.e(TAG, \"Ethereum connection error: ${result.message}\")\r\n//                                    Toast.makeText(context, result.message, Toast.LENGTH_SHORT)\r\n//                                        .show()\r\n//\r\n//                                } else {\r\n//                                    walletViewModel.setConnectedVals(true)\r\n//                                    Log.d(TAG, \"Ethereum connection result: $result\")\r\n//                                    Toast.makeText(context, result.toString(), Toast.LENGTH_SHORT)\r\n//                                        .show()\r\n//                                }\r\n//                            }\r\n//                        }\r\n//                    }\r\n//                }\r\n//            } catch (ex: Exception) {\r\n//                Log.e(TAG, \"connectedVals: \", ex)\r\n//            }\r\n//        }\r\n\r\n        val bookingHistoryAdapter =\r\n            BookingHistoryAdapter(ArrayList(), isUpcomingTabSelected = true, this)\r\n        binding.rvBookingHistory.adapter = bookingHistoryAdapter\r\n\r\n        currentActivity.runOnUiThread {\r\n            bookinghistoryViewModel.isUpcomingTabSelected.observe(viewLifecycleOwner) {\r\n                try {\r\n                    if (it) {\r\n                        setUpcomingTab()\r\n                    } else {\r\n                        setCompletedTab()\r\n                    }\r\n                } catch (e: Exception) {\r\n                    e.printStackTrace()\r\n                    try {\r\n                        if (bookinghistoryViewModel.transactionListAp.value?.pastBooking.isNullOrEmpty() && bookinghistoryViewModel.transactionListAp.value?.upcomingBooking.isNullOrEmpty() && bookinghistoryViewModel.isApiCalled.value == false) {\r\n                            binding.noDataLay.noDataLay.visibility = View.VISIBLE\r\n                        } else {\r\n                            binding.noDataLay.noDataLay.visibility = View.GONE\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        e.printStackTrace()\r\n                        binding.noDataLay.noDataLay.visibility = View.VISIBLE\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        currentActivity.runOnUiThread {\r\n            bookinghistoryViewModel.isApiCalled.observe(viewLifecycleOwner) {\r\n                if (!it) {\r\n                    bookinghistoryViewModel.transactionListAp.value?.let { it1 ->\r\n                        try {\r\n                            if (bookinghistoryViewModel.isUpcomingTabSelected.value == true && !it1.upcomingBooking.isNullOrEmpty()) {\r\n                                bookingHistoryAdapter.refreshLists(\r\n                                    it1.upcomingBooking,\r\n                                    bookinghistoryViewModel.isUpcomingTabSelected.value!!\r\n                                )\r\n                                binding.noDataLay.noDataLay.visibility = View.GONE\r\n                            } else if (!it1.pastBooking.isNullOrEmpty()) {\r\n                                bookingHistoryAdapter.refreshLists(\r\n                                    it1.pastBooking,\r\n                                    bookinghistoryViewModel.isUpcomingTabSelected.value!!\r\n                                )\r\n                                binding.noDataLay.noDataLay.visibility = View.GONE\r\n                            } else {\r\n                                binding.noDataLay.noDataLay.visibility = View.VISIBLE\r\n                            }\r\n                        } catch (e: Exception) {\r\n                            e.printStackTrace()\r\n                        }\r\n                    }\r\n//                    bookinghistoryViewModel.setApiCall(false)\r\n                    binding.progressBar.visibility = View.GONE\r\n                } else {\r\n                    binding.progressBar.visibility = View.VISIBLE\r\n//                    bookinghistoryViewModel.setApiCall(true)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        currentActivity.runOnUiThread {\r\n            bookinghistoryViewModel.walletBalanceDataLists.observe(viewLifecycleOwner) {\r\n                it?.let {\r\n                    if (it.data != null) {\r\n                        it.data.balance?.let { it2 -> binding.tvWallet.text = \"$it2 ETH\" }\r\n                        it.data.tokenBalance?.let { it2 -> binding.tvReward.text = \"$it2 FRQ\" }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        binding.upcomingTab.setOnClickListener {\r\n            if (bookinghistoryViewModel.isApiCalled.value == false) {\r\n                bookinghistoryViewModel.setUpcomingTabValue(true)\r\n            }\r\n        }\r\n        binding.completedTab.setOnClickListener {\r\n            if (bookinghistoryViewModel.isApiCalled.value == false) {\r\n                bookinghistoryViewModel.setUpcomingTabValue(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setUpcomingTab() {\r\n        binding.upcomingTab.setTextColor(Color.WHITE)\r\n        binding.upcomingTab.background = resources.getDrawable(R.drawable.purple_corner_cut_bg)\r\n        binding.headUpcomingBookings.text = \"Upcoming Bookings\"\r\n\r\n        binding.completedTab.setTextColor(Color.BLACK)\r\n        binding.completedTab.background = resources.getDrawable(R.drawable.transparent_bg)\r\n    }\r\n\r\n    private fun setCompletedTab() {\r\n        binding.completedTab.setTextColor(Color.WHITE)\r\n        binding.completedTab.background = resources.getDrawable(R.drawable.purple_corner_cut_bg)\r\n        binding.headUpcomingBookings.text = \"Completed Bookings\"\r\n\r\n        binding.upcomingTab.setTextColor(Color.BLACK)\r\n        binding.upcomingTab.background = resources.getDrawable(R.drawable.transparent_bg)\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        binding.headerLays.tvHeader.text = \"Booking History\"\r\n        bookinghistoryViewModel.callTransactionslistApi(\r\n            sharedPreferences?.getString(\r\n                Constants.Authorization,\r\n                null\r\n            ).toString()\r\n        )\r\n\r\n        currentActivity.runOnUiThread {\r\n            try {\r\n//                if (currentActivity is MainActivity && walletViewModel.connectedVals.value == true) {\r\n//                    walletViewModel.getBalence { result ->\r\n//                        if (result is RequestError) {\r\n//                            if (result.code.equals(ErrorType.UNAUTHORISED_REQUEST.code)) {\r\n//                                walletViewModel.setConnectedVals(false)\r\n//                            }\r\n//                            Log.e(TAG, \"Ethereum connection error: ${result.message}\")\r\n//                            Toast.makeText(context, result.message, Toast.LENGTH_SHORT).show()\r\n//\r\n//                        } else {\r\n//                            walletViewModel.setConnectedVals(true)\r\n//                            Log.d(TAG, \"Ethereum connection result: $result\")\r\n//                            Toast.makeText(context, result.toString(), Toast.LENGTH_SHORT).show()\r\n//                        }\r\n//                    }\r\n//                }\r\n//\r\n//                val metamaskAddress =\r\n//                    sharedPreferences.getString(Constants.MetaMaskWalletAddress, null)\r\n//                if (metamaskAddress != null) {\r\n//                    bookinghistoryViewModel.getWalletBalence(metamaskAddress)\r\n//                } else {\r\n//                    try {\r\n//                        startActivity(\r\n//                            Intent(\r\n//                                activity,\r\n//                                com.dev.frequenc.MainActivity::class.java\r\n//                            )\r\n//                        )\r\n//                    } catch (ex: Exception) {\r\n//                        ex.printStackTrace()\r\n//\r\n//                    }\r\n//                }\r\n            } catch (ex: Exception) {\r\n                Log.e(TAG, \"WalletViewModel: \", ex)\r\n                walletViewModel.setConnectedVals(false)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    override fun onItemClicked(itemPositon: Int) {\r\n        currentActivity.runOnUiThread {\r\n            if (bookinghistoryViewModel.isUpcomingTabSelected.value == true) {\r\n                bookinghistoryViewModel.transactionListAp.value?.upcomingBooking?.get(itemPositon)\r\n                    ?.let {\r\n                        moveToShowTicket(\r\n                            TicketDetailsModel(\r\n                                tokenId = it.tokenId,\r\n                                amount = it.amount.toString(),\r\n                                ownerAddress = it.ownerAddress,\r\n                                contractAddress = it.contractAddress,\r\n                                eventImage = it.eventImage,\r\n                                eventTitle = it.eventTitle,\r\n                                eventStartDate = it.eventStartDate,\r\n                                ticket_quantity = it.ticket_quantity,\r\n                                ticket_type = it.ticket_type,\r\n                                payment_status = it.payment_status,\r\n                                transactionHash = it.transactionHash\r\n                            )\r\n                        )\r\n                    }\r\n            } else {\r\n                bookinghistoryViewModel.transactionListAp.value?.pastBooking?.get(itemPositon)\r\n                    ?.let {\r\n                        moveToShowTicket(\r\n                            TicketDetailsModel(\r\n                                tokenId = it.tokenId,\r\n                                amount = it.amount.toString(),\r\n                                ownerAddress = it.ownerAddress,\r\n                                contractAddress = it.contractAddress,\r\n                                eventImage = it.eventImage,\r\n                                eventTitle = it.eventTitle,\r\n                                eventStartDate = it.eventStartDate,\r\n                                ticket_quantity = it.ticket_quantity,\r\n                                ticket_type = it.ticket_type,\r\n                                payment_status = it.payment_status,\r\n                                transactionHash = it.transactionHash\r\n                            )\r\n                        )\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun moveToShowTicket(ticketDetailsModel: TicketDetailsModel) {\r\n        val myArguments = Bundle()\r\n        myArguments.putParcelable(\"ticketDetailsModel\", ticketDetailsModel)\r\n        try {\r\n            val fragmentss =\r\n                activity?.supportFragmentManager?.findFragmentByTag(\"ShowTicketFragment\")\r\n            if (fragmentss != null) {\r\n                val showTicketFragment = fragmentss as ShowTicketFragment\r\n                showTicketFragment.arguments = myArguments\r\n                activity?.supportFragmentManager?.beginTransaction()\r\n                    ?.replace(R.id.flFragment, showTicketFragment, \"ShowTicketFragment\")\r\n                    ?.commit()\r\n            } else {\r\n                val showTicketFragment = ShowTicketFragment()\r\n                showTicketFragment.arguments = myArguments\r\n                activity?.supportFragmentManager?.beginTransaction()\r\n                    ?.add(R.id.flFragment, showTicketFragment, \"ShowTicketFragment\")\r\n                    ?.commit()\r\n            }\r\n        } catch (ex: Exception) {\r\n            ex.printStackTrace()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dev/frequenc/ui_codes/screens/booking_process/booking_history/BookingHistoryFragment.kt b/app/src/main/java/com/dev/frequenc/ui_codes/screens/booking_process/booking_history/BookingHistoryFragment.kt
--- a/app/src/main/java/com/dev/frequenc/ui_codes/screens/booking_process/booking_history/BookingHistoryFragment.kt	(revision 260d20de22f7815a50c3121e363e948fcaa44ffd)
+++ b/app/src/main/java/com/dev/frequenc/ui_codes/screens/booking_process/booking_history/BookingHistoryFragment.kt	(date 1701426715382)
@@ -282,24 +282,7 @@
 //                        }
 //                    }
 //                }
-//
-//                val metamaskAddress =
-//                    sharedPreferences.getString(Constants.MetaMaskWalletAddress, null)
-//                if (metamaskAddress != null) {
-//                    bookinghistoryViewModel.getWalletBalence(metamaskAddress)
-//                } else {
-//                    try {
-//                        startActivity(
-//                            Intent(
-//                                activity,
-//                                com.dev.frequenc.MainActivity::class.java
-//                            )
-//                        )
-//                    } catch (ex: Exception) {
-//                        ex.printStackTrace()
-//
-//                    }
-//                }
+//booking
             } catch (ex: Exception) {
                 Log.e(TAG, "WalletViewModel: ", ex)
                 walletViewModel.setConnectedVals(false)
