Index: app/src/main/java/com/dev/frequenc/ui_codes/screens/login/LoginViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dev.frequenc.ui_codes.screens.login\r\n\r\nimport android.content.Intent\r\nimport android.util.Log\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.dev.frequenc.ui_codes.data.RegisterUserResponse\r\nimport com.dev.frequenc.ui_codes.data.confirmuserotp.ConfirmOtpResponse\r\nimport com.dev.frequenc.ui_codes.util.Constants\r\nimport com.dev.frequenc.ui_codes.screens.utils.ApiClient\r\nimport kotlinx.coroutines.launch\r\nimport org.json.JSONObject\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport kotlin.Exception\r\n\r\nclass LoginViewModel : ViewModel() {\r\n    var userId: String = \"\"\r\n    private val _startOtpTimer = MutableLiveData<Boolean>(false)\r\n    val startOtpTimer : LiveData<Boolean>\r\n        get() = _startOtpTimer\r\n    var _mob_no = MutableLiveData<String>(null)\r\n    var _receivedToken = \"--1\"\r\n    var isAgoraRegistered = false\r\n    var isUserTypeRegistered = false\r\n//    private val mobile_no: LiveData<String> get() =  _mob_no\r\n//    private val otp : MutableLiveData<String> get() = _otp\r\n\r\n    val _toastMessage = MutableLiveData<String>(\"\")\r\n\r\n    private val _currentFragmentTag = MutableLiveData<String>().apply { value = \"0\" }\r\n    var audienceId: String = \"\"\r\n    val currentFragmentTag: LiveData<String>\r\n        get() = _currentFragmentTag\r\n\r\n    fun setCurrentFragmentTag(currentFragment: String) {\r\n        viewModelScope.launch {\r\n            _currentFragmentTag.value = currentFragment\r\n        }\r\n    }\r\n\r\n    private val __isApiCalled = MutableLiveData<Boolean>().apply { value = false }\r\n    val isApiCalled: LiveData<Boolean>\r\n        get() = __isApiCalled\r\n//\r\n//    var isRegisterApiCalled = MutableLiveData<Boolean>(false)\r\n//    var isVerifyOtpApiHit = MutableLiveData<Boolean>(false)\r\n//    var isUserTypeApiHit = MutableLiveData<Boolean>(false)\r\n//\r\n//    fun login() {\r\n//        viewModelScope.launch {\r\n//            moveToHome()\r\n//        }\r\n//    }\r\n//\r\n//    private suspend fun moveToHome() {\r\n//        if (_loginResult.value == true) {\r\n//\r\n//        }\r\n//    }\r\n\r\n    fun callRegisterApi(phone_no: String) {\r\n        viewModelScope.launch {\r\n        __isApiCalled.value = true\r\n        ApiClient.getInstance()!!.register(registerUserReq(phone_no))!!\r\n            .enqueue(object : Callback<RegisterUserResponse> {\r\n                override fun onResponse(\r\n                    call: Call<RegisterUserResponse>,\r\n                    response: Response<RegisterUserResponse>\r\n                ) {\r\n                        __isApiCalled.value = false\r\n                        if (response.isSuccessful && response.body() != null) {\r\n                            _toastMessage.value = response.body()?.message.toString()\r\n                            moveToOtpVerification()\r\n                        } else {\r\n                            if (response.body() != null) Log.d(\r\n                                Constants.Error,\r\n                                \"onResponse:callRegisterApi() \" + response.body()\r\n                            )\r\n                            _toastMessage.value = response?.errorBody()?.string().toString()\r\n                        }\r\n                    }\r\n\r\n                override fun onFailure(call: Call<RegisterUserResponse>, t: Throwable) {\r\n                    _toastMessage.value = t.localizedMessage\r\n                    __isApiCalled.value = false\r\n                    Log.e(Constants.Error, \"onFailure: \", t)\r\n                }\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    data class registerUserReq(var phone_no: String)\r\n\r\n    fun moveToOtpVerification() {\r\n        _currentFragmentTag.value = \"1\"\r\n    }\r\n\r\n    fun moveToLogin() {\r\n        _currentFragmentTag.value = \"0\"\r\n    }\r\n\r\n    fun moveToUserType() {\r\n        _currentFragmentTag.value = \"2\"\r\n    }\r\n\r\n    fun moveToHome() {\r\n        _currentFragmentTag.value = \"-1\"\r\n    }\r\n\r\n    fun moveToIntro() {\r\n        _currentFragmentTag.value = \"3\"\r\n    }\r\n\r\n    fun callVerifyOtpApi(phone_no: String?, otp: String) {\r\n        viewModelScope.launch {\r\n            __isApiCalled.value = true\r\n            otp.let {\r\n                phone_no?.let { it1 ->\r\n                    ApiClient.getInstance()!!\r\n                        .confirmUserOtp(VerifyOtpReq(phone_no = it1, otp = it.toInt()))!!\r\n                        .enqueue(object : Callback<ConfirmOtpResponse> {\r\n                            override fun onResponse(\r\n                                call: Call<ConfirmOtpResponse>,\r\n                                response: Response<ConfirmOtpResponse>\r\n                            ) =\r\n                                run {\r\n                                    __isApiCalled.value = false\r\n                                    if (response.isSuccessful) {\r\n                                        try {\r\n                                            isAgoraRegistered = response.body()!!.data.isAgoraId\r\n                                        }\r\n                                        catch (ex: Exception ) {\r\n                                            ex.printStackTrace()\r\n                                        }\r\n                                        try {\r\n                                            _receivedToken =\r\n                                                response.headers().get(Constants.Authorization)\r\n                                                    .toString()\r\n                                            userId = response.body()!!.data.user.id\r\n                                        }\r\n                                        catch (ex: Exception ) { ex.printStackTrace()}\r\n\r\n                                        try {\r\n                                            if (response.body()!!.data.user.user_type.equals(\"audience\")) {\r\n                                                isUserTypeRegistered = true\r\n                                                if (!response.body()!!.data.user.audience_id.isNullOrEmpty()) {\r\n                                                    audienceId =\r\n                                                        response.body()!!.data.user.audience_id\r\n                                                }\r\n                                                moveToHome()\r\n                                            } else if (response.body()!!.data.user.user_type.equals(\r\n                                                    \"venue\"\r\n                                                )\r\n                                            ) {\r\n                                                isUserTypeRegistered = true\r\n                                                if (!response.body()!!.data.user.venue_id.isNullOrEmpty()) {\r\n                                                    audienceId =\r\n                                                        response.body()!!.data.user.venue_id[0].toString()\r\n                                                }\r\n                                                moveToHome()\r\n                                            } else if (response.body()!!.data.user.user_type.equals(\r\n                                                    \"artist\"\r\n                                                )\r\n                                            ) {\r\n                                                isUserTypeRegistered = true\r\n                                                if (!response.body()!!.data.user.audience_id.isNullOrEmpty()) {\r\n                                                    audienceId =\r\n                                                        response.body()!!.data.user.audience_id\r\n                                                }\r\n                                                moveToHome()\r\n                                            } else if (response.body()!!.data.user.user_type.equals(\"vendor\")\r\n                                            ) {\r\n                                                isUserTypeRegistered = true\r\n                                                if (!response.body()!!.data.user.audience_id.isNullOrEmpty()) {\r\n                                                    audienceId =\r\n                                                        response.body()!!.data.user.audience_id\r\n                                                }\r\n                                                moveToHome()\r\n                                            } else {\r\n                                                isUserTypeRegistered = false\r\n//                                                callUpdateUserTypeApi(\r\n//                                                    _receivedToken,\r\n//                                                    phone_no,\r\n//                                                    \"audience\"\r\n//                                                )\r\n                                            }\r\n                                        } catch (e: Exception) {\r\n                                            e.printStackTrace()\r\n                                            isUserTypeRegistered = false\r\n//                                            moveToUserType()\r\n//                                            callUpdateUserTypeApi(\r\n//                                                _receivedToken,\r\n//                                                phone_no,\r\n//                                                \"audience\"\r\n//                                            )\r\n                                        }\r\n                                    } else {\r\n                                        Log.d(\r\n                                            Constants.Error,\r\n                                            \"onResponse:callVerifyOtpApi() code:${response.code()} &&  message= ${\r\n                                                response.errorBody()?.byteStream()?.read()\r\n                                            }\"\r\n                                        )\r\n                                        _toastMessage.value =\r\n                                            response.errorBody()?.string().toString()\r\n                                    }\r\n                                    if (_toastMessage.value == null) {\r\n                                        _toastMessage.value = response.message().toString()\r\n                                    }\r\n                                }\r\n\r\n                            override fun onFailure(\r\n                                call: Call<ConfirmOtpResponse>,\r\n                                t: Throwable\r\n                            ) {\r\n                                _toastMessage.value = t.localizedMessage\r\n                                __isApiCalled.value = false\r\n                                Log.e(Constants.Error, \"onFailure: \", t)\r\n                            }\r\n                        })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    data class VerifyOtpReq(val phone_no: String, val otp: Int)\r\n\r\n//    fun callUpdateUserTypeApi(tokens: String, phone_no: String, userTypeKey: String) {\r\n//        viewModelScope.launch {\r\n//        __isApiCalled.value = true\r\n//        tokens.let {\r\n//            phone_no.let {\r\n//                userTypeKey.let {\r\n//                    ApiClient.getInstance()!!\r\n//                        .updateUserType(\r\n//                            tokens,\r\n//                            UpdateUserReq(phone_no = phone_no, user_type = userTypeKey)\r\n//                        )!!\r\n//                        .enqueue(object : Callback<UpdateUserTypeResponse> {\r\n//                            override fun onResponse(\r\n//                                call: Call<UpdateUserTypeResponse>,\r\n//                                response: Response<UpdateUserTypeResponse>\r\n//                            ): Unit = run {\r\n//                                    __isApiCalled.value = false\r\n//                                    if (response.isSuccessful) {\r\n//                                        try {\r\n//                                            if (response.body()!!.data.user.user_type.equals(\"audience\")) {\r\n//                                                isUserTypeRegistered = true\r\n//                                                if (!response.body()!!.data.user.audience_id.isNullOrEmpty()) {\r\n//                                                    audienceId =\r\n//                                                        response.body()!!.data.user.audience_id\r\n//                                                }\r\n//                                            } else if (response.body()!!.data.user.user_type.equals(\r\n//                                                    \"venue\"\r\n//                                                )\r\n//                                            ) {\r\n//                                                isUserTypeRegistered = true\r\n//                                                if (!response.body()!!.data.user.venue_id.isNullOrEmpty()) {\r\n//                                                    audienceId =\r\n//                                                        response.body()!!.data.user.venue_id[0].toString()\r\n//                                                }\r\n//                                            } else if (response.body()!!.data.user.user_type.equals(\r\n//                                                    \"artist\"\r\n//                                                )\r\n//                                            ) {\r\n//                                                isUserTypeRegistered = true\r\n//                                                if (!response.body()!!.data.user.artist_id.isNullOrEmpty()) {\r\n//                                                    audienceId =\r\n//                                                        response.body()!!.data.user.artist_id\r\n//                                                }\r\n//                                            } else if (response.body()!!.data.user.user_type.equals(\r\n//                                                    \"vendor\"\r\n//                                                )\r\n//                                            ) {\r\n//                                                isUserTypeRegistered = true\r\n//                                                if (!response.body()!!.data.user.vendor_id.isNullOrEmpty()) {\r\n//                                                    audienceId =\r\n//                                                        response.body()!!.data.user.artist_id\r\n//                                                }\r\n//                                            }\r\n//                                        } catch (e: Exception) {\r\n//                                            e.printStackTrace()\r\n//                                        }\r\n//                                        //                    if (!response.body()!!.data.isUserType.toString().isNullOrEmpty()) {\r\n//                                        //                    }\r\n//                                        moveToHome()\r\n//                                    } else {\r\n//                                        Log.d(\r\n//                                            Constants.Error,\r\n//                                            \"onResponse:callUpdateUserTypeApi() \" + response.body()\r\n//                                        )\r\n//                                        _toastMessage.value =\r\n//                                            response?.errorBody()?.string().toString()\r\n//                                    }\r\n//                                }\r\n//\r\n//                            override fun onFailure(\r\n//                                call: Call<UpdateUserTypeResponse>,\r\n//                                t: Throwable\r\n//                            ) {\r\n//                                __isApiCalled.value = false\r\n//                                _toastMessage.value = t.localizedMessage\r\n//                                Log.e(Constants.Error, \"onFailure:callUpdateUserTypeApi \", t)\r\n//                            }\r\n//                        })\r\n//                }\r\n//                }\r\n//            }\r\n//        }\r\n//    }\r\n\r\n    fun callResendOtpApi(phone_no: String) {\r\n        __isApiCalled.value = true\r\n        _startOtpTimer.value = true\r\n        viewModelScope.launch {\r\n            ApiClient.getInstance()?.registerAttendee(JSONObject().put(\"phone_no\", phone_no))\r\n                ?.enqueue(object : Callback<Any> {\r\n                    override fun onResponse(call: Call<Any>, response: Response<Any>) {\r\n                        __isApiCalled.value = false\r\n                        _startOtpTimer.value = false\r\n                        if (response.isSuccessful) {\r\n                            _toastMessage.value = response.body().toString()\r\n                        } else {\r\n                            Log.d(\r\n                                Constants.Error,\r\n                                \"onResponse:callResendOtpApi() \" + response.body()\r\n                            )\r\n                            _toastMessage.value =\r\n                                response?.errorBody()?.string().toString()\r\n                        }\r\n                    }\r\n\r\n                    override fun onFailure(call: Call<Any>, t: Throwable) {\r\n                        __isApiCalled.value = false\r\n                        _startOtpTimer.value = false\r\n                        _toastMessage.value = t.localizedMessage\r\n                        Log.e(Constants.Error, \"onFailure:callResendOtpApi \", t)\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    fun setStartOtpTimerValue(isResendOtpTimerStartd: Boolean) {\r\n        _startOtpTimer.value = isResendOtpTimerStartd\r\n    }\r\n}\r\n\r\ndata class UpdateUserReq(val phone_no: String, val user_type: String)\r\nclass LoginViewModelFactory() : ViewModelProvider.Factory {\r\n\r\n    override fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n\r\n        if (modelClass.isAssignableFrom(LoginViewModel::class.java)) {\r\n\r\n            @Suppress(\"UNCHECKED_CAST\")\r\n\r\n            return LoginViewModel() as T\r\n\r\n        }\r\n\r\n        throw IllegalArgumentException(\"Unknown ViewModel class\")\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dev/frequenc/ui_codes/screens/login/LoginViewModel.kt b/app/src/main/java/com/dev/frequenc/ui_codes/screens/login/LoginViewModel.kt
--- a/app/src/main/java/com/dev/frequenc/ui_codes/screens/login/LoginViewModel.kt	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/app/src/main/java/com/dev/frequenc/ui_codes/screens/login/LoginViewModel.kt	(date 1702018629135)
@@ -1,22 +1,22 @@
 package com.dev.frequenc.ui_codes.screens.login
 
-import android.content.Intent
-import android.util.Log
-import androidx.lifecycle.LiveData
-import androidx.lifecycle.MutableLiveData
-import androidx.lifecycle.ViewModel
-import androidx.lifecycle.ViewModelProvider
-import androidx.lifecycle.viewModelScope
-import com.dev.frequenc.ui_codes.data.RegisterUserResponse
-import com.dev.frequenc.ui_codes.data.confirmuserotp.ConfirmOtpResponse
-import com.dev.frequenc.ui_codes.util.Constants
-import com.dev.frequenc.ui_codes.screens.utils.ApiClient
-import kotlinx.coroutines.launch
-import org.json.JSONObject
-import retrofit2.Call
-import retrofit2.Callback
-import retrofit2.Response
-import kotlin.Exception
+        import android.content.Intent
+        import android.util.Log
+        import androidx.lifecycle.LiveData
+        import androidx.lifecycle.MutableLiveData
+        import androidx.lifecycle.ViewModel
+        import androidx.lifecycle.ViewModelProvider
+        import androidx.lifecycle.viewModelScope
+        import com.dev.frequenc.ui_codes.data.RegisterUserResponse
+        import com.dev.frequenc.ui_codes.data.confirmuserotp.ConfirmOtpResponse
+        import com.dev.frequenc.ui_codes.screens.utils.ApiClient
+        import com.dev.frequenc.ui_codes.util.Constants
+        import kotlinx.coroutines.launch
+        import org.json.JSONObject
+        import retrofit2.Call
+        import retrofit2.Callback
+        import retrofit2.Response
+        import java.lang.Exception
 
 class LoginViewModel : ViewModel() {
     var userId: String = ""
@@ -24,8 +24,8 @@
     val startOtpTimer : LiveData<Boolean>
         get() = _startOtpTimer
     var _mob_no = MutableLiveData<String>(null)
-    var _receivedToken = "--1"
     var isAgoraRegistered = false
+    var _receivedToken = "--1"
     var isUserTypeRegistered = false
 //    private val mobile_no: LiveData<String> get() =  _mob_no
 //    private val otp : MutableLiveData<String> get() = _otp
@@ -65,13 +65,13 @@
 
     fun callRegisterApi(phone_no: String) {
         viewModelScope.launch {
-        __isApiCalled.value = true
-        ApiClient.getInstance()!!.register(registerUserReq(phone_no))!!
-            .enqueue(object : Callback<RegisterUserResponse> {
-                override fun onResponse(
-                    call: Call<RegisterUserResponse>,
-                    response: Response<RegisterUserResponse>
-                ) {
+            __isApiCalled.value = true
+            ApiClient.getInstance()!!.register(registerUserReq(phone_no))!!
+                .enqueue(object : Callback<RegisterUserResponse> {
+                    override fun onResponse(
+                        call: Call<RegisterUserResponse>,
+                        response: Response<RegisterUserResponse>
+                    ) {
                         __isApiCalled.value = false
                         if (response.isSuccessful && response.body() != null) {
                             _toastMessage.value = response.body()?.message.toString()
@@ -85,13 +85,13 @@
                         }
                     }
 
-                override fun onFailure(call: Call<RegisterUserResponse>, t: Throwable) {
-                    _toastMessage.value = t.localizedMessage
-                    __isApiCalled.value = false
-                    Log.e(Constants.Error, "onFailure: ", t)
-                }
+                    override fun onFailure(call: Call<RegisterUserResponse>, t: Throwable) {
+                        _toastMessage.value = t.localizedMessage
+                        __isApiCalled.value = false
+                        Log.e(Constants.Error, "onFailure: ", t)
+                    }
 
-            })
+                })
         }
     }
 
@@ -132,67 +132,77 @@
                                 run {
                                     __isApiCalled.value = false
                                     if (response.isSuccessful) {
+                                        _receivedToken =
+                                            response.headers().get(Constants.Authorization)
+                                                .toString()
                                         try {
-                                            isAgoraRegistered = response.body()!!.data.isAgoraId
+                                            isAgoraRegistered  = response.body()!!.data.isAgoraId
                                         }
-                                        catch (ex: Exception ) {
+                                        catch (ex: Exception) {
                                             ex.printStackTrace()
                                         }
                                         try {
-                                            _receivedToken =
-                                                response.headers().get(Constants.Authorization)
-                                                    .toString()
-                                            userId = response.body()!!.data.user.id
+                                            userId  = response.body()!!.data.user._id
                                         }
-                                        catch (ex: Exception ) { ex.printStackTrace()}
-
+                                        catch (ex: Exception) {
+                                            ex.printStackTrace()
+                                        }
                                         try {
-                                            if (response.body()!!.data.user.user_type.equals("audience")) {
-                                                isUserTypeRegistered = true
-                                                if (!response.body()!!.data.user.audience_id.isNullOrEmpty()) {
-                                                    audienceId =
-                                                        response.body()!!.data.user.audience_id
-                                                }
-                                                moveToHome()
-                                            } else if (response.body()!!.data.user.user_type.equals(
-                                                    "venue"
-                                                )
-                                            ) {
-                                                isUserTypeRegistered = true
-                                                if (!response.body()!!.data.user.venue_id.isNullOrEmpty()) {
-                                                    audienceId =
-                                                        response.body()!!.data.user.venue_id[0].toString()
-                                                }
-                                                moveToHome()
-                                            } else if (response.body()!!.data.user.user_type.equals(
-                                                    "artist"
-                                                )
-                                            ) {
-                                                isUserTypeRegistered = true
-                                                if (!response.body()!!.data.user.audience_id.isNullOrEmpty()) {
-                                                    audienceId =
-                                                        response.body()!!.data.user.audience_id
-                                                }
-                                                moveToHome()
-                                            } else if (response.body()!!.data.user.user_type.equals("vendor")
-                                            ) {
-                                                isUserTypeRegistered = true
-                                                if (!response.body()!!.data.user.audience_id.isNullOrEmpty()) {
-                                                    audienceId =
-                                                        response.body()!!.data.user.audience_id
-                                                }
-                                                moveToHome()
-                                            } else {
-                                                isUserTypeRegistered = false
-//                                                callUpdateUserTypeApi(
-//                                                    _receivedToken,
-//                                                    phone_no,
-//                                                    "audience"
+
+                                            audienceId =
+                                                response.body()!!.data.user.audience_id
+                                            moveToHome()
+                                            isUserTypeRegistered = true
+//                                            if (response.body()!!.data.user.user_type.equals("audience")) {
+//                                                isUserTypeRegistered = true
+//                                                if (!response.body()!!.data.user.audience_id.isNullOrEmpty()) {
+//                                                    audienceId =
+//                                                        response.body()!!.data.user.audience_id
+//                                                }
+//                                                moveToHome()
+//                                            } else if (response.body()!!.data.user.user_type.equals(
+//                                                    "venue"
+//                                                )
+//                                            ) {
+//                                                isUserTypeRegistered = true
+//                                                if (!response.body()!!.data.user.venue_id.isNullOrEmpty()) {
+//                                                    audienceId =
+//                                                        response.body()!!.data.user.venue_id[0].toString()
+//                                                }
+//                                                moveToHome()
+//                                            } else if (response.body()!!.data.user.user_type.equals(
+//                                                    "artist"
 //                                                )
-                                            }
+//                                            ) {
+//                                                isUserTypeRegistered = true
+//                                                if (!response.body()!!.data.user.audience_id.isNullOrEmpty()) {
+//                                                    audienceId =
+//                                                        response.body()!!.data.user.audience_id
+//                                                }
+//                                                moveToHome()
+//                                            } else if (response.body()!!.data.user.user_type.equals(
+//                                                    "vendor"
+//                                                )
+//                                            ) {
+//                                                isUserTypeRegistered = true
+//                                                if (!response.body()!!.data.user.audience_id.isNullOrEmpty()) {
+//                                                    audienceId =
+//                                                        response.body()!!.data.user.audience_id
+//                                                }
+//                                                moveToHome()
+//                                            } else {
+//                                                isUserTypeRegistered = false
+////                                                callUpdateUserTypeApi(
+////                                                    _receivedToken,
+////                                                    phone_no,
+////                                                    "audience"
+////                                                )
+//
+//
+//                                            }
                                         } catch (e: Exception) {
                                             e.printStackTrace()
-                                            isUserTypeRegistered = false
+//                                            isUserTypeRegistered = false
 //                                            moveToUserType()
 //                                            callUpdateUserTypeApi(
 //                                                _receivedToken,
@@ -233,20 +243,20 @@
 
 //    fun callUpdateUserTypeApi(tokens: String, phone_no: String, userTypeKey: String) {
 //        viewModelScope.launch {
-//        __isApiCalled.value = true
-//        tokens.let {
-//            phone_no.let {
-//                userTypeKey.let {
-//                    ApiClient.getInstance()!!
-//                        .updateUserType(
-//                            tokens,
-//                            UpdateUserReq(phone_no = phone_no, user_type = userTypeKey)
-//                        )!!
-//                        .enqueue(object : Callback<UpdateUserTypeResponse> {
-//                            override fun onResponse(
-//                                call: Call<UpdateUserTypeResponse>,
-//                                response: Response<UpdateUserTypeResponse>
-//                            ): Unit = run {
+//            __isApiCalled.value = true
+//            tokens.let {
+//                phone_no.let {
+//                    userTypeKey.let {
+//                        ApiClient.getInstance()!!
+//                            .updateUserType(
+//                                tokens,
+//                                UpdateUserReq(phone_no = phone_no, user_type = userTypeKey)
+//                            )!!
+//                            .enqueue(object : Callback<UpdateUserTypeResponse> {
+//                                override fun onResponse(
+//                                    call: Call<UpdateUserTypeResponse>,
+//                                    response: Response<UpdateUserTypeResponse>
+//                                ): Unit = run {
 //                                    __isApiCalled.value = false
 //                                    if (response.isSuccessful) {
 //                                        try {
@@ -270,9 +280,9 @@
 //                                                )
 //                                            ) {
 //                                                isUserTypeRegistered = true
-//                                                if (!response.body()!!.data.user.artist_id.isNullOrEmpty()) {
+//                                                if (!response.body()!!.data.user.audience_id.isNullOrEmpty()) {
 //                                                    audienceId =
-//                                                        response.body()!!.data.user.artist_id
+//                                                        response.body()!!.data.user.audience_id
 //                                                }
 //                                            } else if (response.body()!!.data.user.user_type.equals(
 //                                                    "vendor"
@@ -281,7 +291,7 @@
 //                                                isUserTypeRegistered = true
 //                                                if (!response.body()!!.data.user.vendor_id.isNullOrEmpty()) {
 //                                                    audienceId =
-//                                                        response.body()!!.data.user.artist_id
+//                                                        response.body()!!.data.user.audience_id
 //                                                }
 //                                            }
 //                                        } catch (e: Exception) {
@@ -290,6 +300,8 @@
 //                                        //                    if (!response.body()!!.data.isUserType.toString().isNullOrEmpty()) {
 //                                        //                    }
 //                                        moveToHome()
+////                                    val intent = Intent()
+//
 //                                    } else {
 //                                        Log.d(
 //                                            Constants.Error,
@@ -300,16 +312,16 @@
 //                                    }
 //                                }
 //
-//                            override fun onFailure(
-//                                call: Call<UpdateUserTypeResponse>,
-//                                t: Throwable
-//                            ) {
-//                                __isApiCalled.value = false
-//                                _toastMessage.value = t.localizedMessage
-//                                Log.e(Constants.Error, "onFailure:callUpdateUserTypeApi ", t)
-//                            }
-//                        })
-//                }
+//                                override fun onFailure(
+//                                    call: Call<UpdateUserTypeResponse>,
+//                                    t: Throwable
+//                                ) {
+//                                    __isApiCalled.value = false
+//                                    _toastMessage.value = t.localizedMessage
+//                                    Log.e(Constants.Error, "onFailure:callUpdateUserTypeApi ", t)
+//                                }
+//                            })
+//                    }
 //                }
 //            }
 //        }
Index: app/src/main/java/com/dev/frequenc/ui_codes/screens/login/LoginActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dev.frequenc.ui_codes.screens.login\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.ProgressBar\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.dev.frequenc.R\r\nimport com.dev.frequenc.ui_codes.MainActivity\r\nimport com.dev.frequenc.ui_codes.screens.intro.IntroduceYourselfActivity\r\nimport com.dev.frequenc.util.Constants\r\nimport com.dev.frequenc.util.DataChangeListener\r\n\r\nclass LoginActivity : AppCompatActivity(), DataChangeListener {\r\n    private lateinit var loginViewModel: LoginViewModel\r\n    private lateinit var progressBar: ProgressBar\r\n    private lateinit var sharedPreferencesEditor: SharedPreferences.Editor\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n\r\n    private val loginFragment = LoginFragment()\r\n    private val verifyOtpFragment = VerifyOtpFragment()\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_login)\r\n\r\n        sharedPreferences =\r\n            this.getSharedPreferences(Constants.SharedPreference, Context.MODE_PRIVATE)\r\n        sharedPreferencesEditor =\r\n            sharedPreferences.edit()\r\n\r\n        val loginViewModelFactory: LoginViewModelFactory = LoginViewModelFactory()\r\n        loginViewModel =\r\n            ViewModelProvider(this, loginViewModelFactory).get(LoginViewModel::class.java)\r\n\r\n        addFragment(\"LoginFragment\", loginFragment)\r\n//        loginViewModel.currentFragmentTag.observe( this) { result ->\r\n//            if (result.equals(\"0\")) {\r\n//                supportFragmentManager.beginTransaction()\r\n//                    .replace(R.id.containerLays, loginFragment, \"LoginFragment\")\r\n//                    .commit()\r\n//            } else if (result.equals(\"1\")) {\r\n//                supportFragmentManager.beginTransaction()\r\n//                    .replace(R.id.containerLays, verifyOtpFragment, \"VerifyOtpFragment\")\r\n//                    .commit()\r\n//            } else if (result.equals(\"2\")) {\r\n//                supportFragmentManager.beginTransaction()\r\n//                    .replace(R.id.containerLays, userTypeFragment, \"UserTypeFragment\")\r\n//                    .commit()\r\n//            } else {\r\n//                backToHome()\r\n//            }\r\n//        }\r\n\r\n        progressBar = findViewById(R.id.progressBar)\r\n//        setContent {\r\n//            createLoginView()\r\n//        }\r\n//\r\n//        loginViewModel.toastMessage.observe(this) { it ->\r\n//            run {\r\n//                if (!it.isNullOrBlank() && !it.isNullOrEmpty())\r\n//                    Toast.makeText(this, it, Toast.LENGTH_LONG)\r\n//            }\r\n//        }\r\n\r\n\r\n    }\r\n\r\n\r\n//\r\n//\r\n//    //    @Preview(showBackground = true)\r\n//    @Composable\r\n//    fun createLoginView() {\r\n//        Box( modifier = Modifier\r\n//            .fillMaxSize(),\r\n//                ) {\r\n//            Image(\r\n//                painter = painterResource(id = R . drawable . background),\r\n//                contentDescription = null,\r\n//                contentScale = ContentScale.Crop,\r\n//                modifier = Modifier.fillMaxSize()\r\n//            )\r\n//            Box ( modifier = Modifier) {\r\n////                Image(painter = painterResource(id = R.drawable.blurbackground) ,\r\n////                    contentDescription = null,\r\n////                    modifier = Modifier.fillMaxSize(),\r\n////                    contentScale = ContentScale.FillBounds)\r\n//            Column (\r\n//                modifier = Modifier\r\n//                    .fillMaxSize()\r\n//                    .padding(19.dp)\r\n//                    .background(color = Color.Black)\r\n//            ) {\r\n//                Spacer(modifier = Modifier.fillMaxWidth().height(10.dp))\r\n//                Row(\r\n//                    modifier  = Modifier.fillMaxWidth(),\r\n//                    verticalAlignment = Alignment.Top,\r\n//                    horizontalArrangement = Arrangement.Start\r\n//                ) {\r\n//                    Spacer(modifier = Modifier.height(10.dp))\r\n//                    Box(modifier = Modifier\r\n//                        .size(27.dp)\r\n//                        .background(color = Color.Blue)\r\n//                        .aspectRatio(1f)\r\n//                        .clickable {\r\n//                            backToHome()\r\n//                        },\r\n//                        contentAlignment = Alignment.TopStart\r\n//                    ) {\r\n//                        Icon(imageVector = Icons.Default.ArrowBack,\r\n//                            contentDescription = null,\r\n//                            tint = Color.White,\r\n//                            modifier = Modifier.fillMaxSize())\r\n//                    }\r\n//                }\r\n////                gifImageShown()\r\n////\r\n//\r\n//                Spacer(modifier = Modifier\r\n//                    .height(10.dp)\r\n//                    .fillMaxWidth())\r\n//                Text(\r\n//                    text = \"Sign In To frequenC\",\r\n//                    modifier = Modifier\r\n//                        .fillMaxWidth()\r\n//                        .weight(1f),\r\n//                    color = Color.White,\r\n//                    style = TextStyle(\r\n//                        fontFamily = FontFamily(Font(R.font.robotomedium)),\r\n//                        fontWeight = FontWeight.W500, // Adjust this weight as needed\r\n//                        fontSize = 23.sp\r\n//                    ),\r\n//                    textAlign = TextAlign.Center\r\n//                )\r\n//\r\n//\r\n//                Spacer(modifier = Modifier\r\n//                    .height(10.dp)\r\n//                    .fillMaxWidth())\r\n//\r\n//            }\r\n//            }\r\n//\r\n//        }\r\n//\r\n//\r\n//    }\r\n\r\n\r\n    private fun backToHome() {\r\n        startActivity(Intent(this@LoginActivity, MainActivity::class.java))\r\n        finish()\r\n    }\r\n\r\n    override fun onDataChange(data: Any, use_type: String) {\r\n        when (use_type) {\r\n            \"move\" -> {\r\n\r\n                if (data.equals(\"0\")) {\r\n                    addORReplaceFragment(\"LoginFragment\", loginFragment)\r\n                } else if (data.equals(\"1\")) {\r\n                    addORReplaceFragment(\"VerifyOtpFragment\", verifyOtpFragment)\r\n                } else if (data.equals(\"2\") && !sharedPreferences.getBoolean( Constants.isUserTypeRegistered, false)) {\r\n                    addFragment(\"UserTypeFragment\", UserTypeFragment())\r\n                }\r\n                else if (data.equals(\"3\") && !sharedPreferences.getBoolean( Constants.isUserTypeRegistered, false)) {\r\n                    val intent = Intent(this,IntroduceYourselfActivity::class.java)\r\n                    startActivity(intent)\r\n                }\r\n                else {\r\n                    if (!data.toString().isNullOrEmpty() && data.equals(\"-1\")) {\r\n                        backToHome()\r\n                    }\r\n                }\r\n            }\r\n\r\n            \"api\" -> {\r\n                when (data) {\r\n                    true -> {\r\n                        progressBar.visibility = View.VISIBLE\r\n                    }\r\n                    else -> {\r\n                        progressBar.visibility = View.GONE\r\n                    }\r\n                }\r\n            }\r\n\r\n            \"message\" -> {\r\n                if (!data?.toString().isNullOrEmpty()) Toast.makeText(\r\n                    this@LoginActivity,\r\n                    data.toString(),\r\n                    Toast.LENGTH_LONG\r\n                ).show()\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addORReplaceFragment(fragmentTag: String, fragment: Fragment) {\r\n        val inputMethodManager =\r\n            getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n\r\n        inputMethodManager.hideSoftInputFromWindow(\r\n            supportFragmentManager.fragments.last().requireView().windowToken, 0\r\n        )\r\n            if (supportFragmentManager.findFragmentByTag(fragmentTag) == null) {\r\n                addFragment(fragmentTag, fragment)\r\n            } else {\r\n                replaceFragment(fragmentTag, fragment)\r\n            }\r\n    }\r\n\r\n    private fun addFragment(fragmentTag: String, fragment: Fragment) {\r\n        supportFragmentManager.beginTransaction()\r\n            .add(R.id.containerLays, fragment, fragmentTag)\r\n            .commit()\r\n    }\r\n\r\n    private fun replaceFragment(fragmentTag: String, fragment: Fragment) {\r\n\r\n        if (supportFragmentManager.findFragmentByTag(fragmentTag)?.isVisible == false) {\r\n//        if (supportFragmentManager.findFragmentByTag(fragmentTag)?.isVisible == false) {\r\n            supportFragmentManager.beginTransaction()\r\n                .replace(R.id.containerLays, fragment, fragmentTag)\r\n                .commit()\r\n//        }\r\n        }\r\n    }\r\n//\r\n//\r\n//    //    @Preview(showBackground = true )\r\n//    @Composable\r\n//    fun gifImageShown() {\r\n//        val requestOptions = RequestOptions().diskCacheStrategy(DiskCacheStrategy.ALL)\r\n//        Box(\r\n//            modifier = Modifier.fillMaxSize(),\r\n//            contentAlignment = Alignment.Center\r\n//        ) {\r\n//            val context = LocalView.current.context\r\n//\r\n//            val imageView = ImageView(context)\r\n//            Glide.with(context)\r\n//                .asGif()\r\n//                .load(R.drawable.frequenc_logo) // Replace with the resource ID of your GIF\r\n//                .apply(requestOptions)\r\n//                .into(imageView)\r\n//\r\n//            var density  = LocalDensity.current.density\r\n//            AndroidView(\r\n//                factory = {\r\n//                    imageView.layoutParams = ViewGroup.LayoutParams(\r\n//                        (200f * density).toInt(),\r\n//                        (200f * density).toInt()\r\n//                    )\r\n//                    imageView\r\n//                },\r\n//                modifier = Modifier.fillMaxSize(),\r\n//                update = { view ->\r\n//                    // You can update the view here if needed\r\n//                })\r\n//        }\r\n//    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dev/frequenc/ui_codes/screens/login/LoginActivity.kt b/app/src/main/java/com/dev/frequenc/ui_codes/screens/login/LoginActivity.kt
--- a/app/src/main/java/com/dev/frequenc/ui_codes/screens/login/LoginActivity.kt	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/app/src/main/java/com/dev/frequenc/ui_codes/screens/login/LoginActivity.kt	(date 1702016765405)
@@ -14,7 +14,7 @@
 import com.dev.frequenc.R
 import com.dev.frequenc.ui_codes.MainActivity
 import com.dev.frequenc.ui_codes.screens.intro.IntroduceYourselfActivity
-import com.dev.frequenc.util.Constants
+import com.dev.frequenc.ui_codes.util.Constants
 import com.dev.frequenc.util.DataChangeListener
 
 class LoginActivity : AppCompatActivity(), DataChangeListener {
Index: app/src/main/java/com/dev/frequenc/ui_codes/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dev.frequenc.ui_codes\r\n\r\nimport android.Manifest\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.content.pm.PackageManager\r\nimport android.os.Bundle\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.EditText\r\nimport android.widget.Toast\r\nimport androidx.activity.OnBackPressedCallback\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.FragmentManager\r\nimport com.dev.frequenc.ui_codes.connect.home.ConnectHomeFragment\r\nimport com.bumptech.glide.Glide\r\nimport com.dev.agorademo2.LogUtils\r\nimport com.dev.agorademo2.PermissionsManager\r\nimport com.dev.frequenc.R\r\nimport com.dev.frequenc.databinding.ActivityMainBinding\r\nimport com.dev.frequenc.ui_codes.connect.chat.AllChatUserFragment\r\nimport com.dev.frequenc.ui_codes.data.AudienceDataResponse\r\nimport com.dev.frequenc.ui_codes.screens.Dashboard.MarketPlaceFragment\r\nimport com.dev.frequenc.ui_codes.screens.Dashboard.savedevent.SavedEventFragment\r\nimport com.dev.frequenc.ui_codes.screens.Dashboard.wallet.WalletFragment\r\nimport com.dev.frequenc.ui_codes.screens.Profile.AudienceProfileActivity\r\nimport com.dev.frequenc.ui_codes.screens.booking_process.booking_history.BookingHistoryFragment\r\nimport com.dev.frequenc.ui_codes.screens.utils.ApiClient\r\nimport com.dev.frequenc.ui_codes.util.KeysConstant\r\nimport com.dev.frequenc.ui_codes.util.Constants\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport io.agora.CallBack\r\nimport io.agora.ConnectionListener\r\nimport io.agora.Error\r\nimport io.agora.chat.ChatClient\r\nimport io.agora.chat.ChatOptions\r\nimport io.agora.chat.uikit.EaseUIKit\r\nimport io.agora.cloud.HttpClientManager\r\nimport org.json.JSONObject\r\nimport retrofit2.Call\r\nimport retrofit2.Response\r\nimport java.io.Serializable\r\n\r\n\r\n@AndroidEntryPoint\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    private var pwd: String? = \"dssadasd\"\r\n    private var username: String? = \"sdfds\"\r\n    val requestcode = 101\r\n    var latitude = \"\"\r\n    var longitude = \"\"\r\n    var exitCount = 0\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n    lateinit var authorization: String\r\n    lateinit var audience_id: String\r\n    lateinit var binding: ActivityMainBinding\r\n    private lateinit var connectionListener: ConnectionListener\r\n//    private lateinit var walletViewModel: WalletViewModel\r\n\r\n    companion object {\r\n        private const val NEW_LOGIN = \"NEW_LOGIN\"\r\n        private const val RENEW_TOKEN = \"RENEW_TOKEN\"\r\n        private const val LOGIN_URL = \"https://a41.chat.agora.io/app/chat/user/login\"\r\n        private const val REGISTER_URL = \"https://a41.chat.agora.io/app/chat/user/register\"\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        sharedPreferences = getSharedPreferences(Constants.SharedPreference, Context.MODE_PRIVATE)!!\r\n\r\n        binding.drawerLayout.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS)\r\n\r\n//        binding.drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED)\r\n\r\n\r\n        val allChatUserFragment = AllChatUserFragment()\r\n        val connectFragment = ConnectHomeFragment()\r\n        val marketPlace = MarketPlaceFragment()\r\n        val walletFragment = WalletFragment()\r\n        val savedEventFragment = SavedEventFragment()\r\n        val bookingHistoryFragment = BookingHistoryFragment()\r\n\r\n        setCurrentFragment(marketPlace, \"MarketPlaceFragment\")\r\n\r\n\r\n        binding.bottomNavigationView.setOnNavigationItemSelectedListener {\r\n            when (it.itemId) {\r\n                R.id.bottom_marketplace ->\r\n                    setCurrentFragment(marketPlace, \"MarketPlaceFragment\")\r\n                R.id.bottom_chat      ->\r\n//                    Toast.makeText(this,\"Releasing soon\",Toast.LENGTH_SHORT).show()\r\n                    setCurrentFragment(allChatUserFragment, \"AllChatUserFragment\")\r\n                R.id.bottom_connect     ->\r\n//                    Toast.makeText(this,\"Releasing soon\",Toast.LENGTH_SHORT).show()\r\n\r\n                    setCurrentFragment(connectFragment, \"ConnectFragment\")\r\n                R.id.bottom_wallet ->\r\n                    Toast.makeText(this,\"Under Construction\",Toast.LENGTH_SHORT).show()\r\n\r\n//                    startActivity(Intent(this@MainActivity, com.dev.frequenc.MainActivity:: class.java))\r\n//                R.id.bottom_wallet -> setCurrentFragment(walletFragment, \"WalletFragment\")\r\n            }\r\n\r\n            true\r\n        }\r\n\r\n\r\n        try {\r\n//            sharedPreferences.edit().putString(Constants.User_Id, username)\r\n//                .apply()\r\n            val generatedUsername = sharedPreferences.getString(Constants.User_Id, null).toString()\r\n            val mob_no = sharedPreferences.getString(Constants.PhoneNo, null)\r\n            pwd= username!!.substring(generatedUsername!!.lastIndex-5, generatedUsername!!.lastIndex) + \"@\" + mob_no!!.substring(mob_no.lastIndex-5, mob_no.lastIndex)\r\n            username = generatedUsername\r\n        }\r\n        catch (e: Exception) { e.printStackTrace()}\r\n\r\n        val userRegistered = sharedPreferences.getBoolean(Constants.isUserTypeRegistered, false)\r\n\r\n        authorization = sharedPreferences.getString(Constants.Authorization, \"-1\").toString()\r\n        audience_id = sharedPreferences.getString(Constants.AudienceId, \"-1\").toString()\r\n\r\n        requestPermissions()\r\n        initSDK()\r\n        addConnectionListener()\r\n\r\n        if (userRegistered && !(authorization == \"-1\") && !(audience_id == \"-1\")) {\r\n\r\n            Log.d(\"Audience Id\", audience_id)\r\n            Log.d(\"Bearer\", authorization)\r\n            Log.d(\"token\", \"onCreate: ${sharedPreferences.getString(Constants.Authorization, \" \")}\")\r\n//            Toast.makeText(this, \"Login Success\", Toast.LENGTH_SHORT).show()\r\n            binding.navbar.rlLogout.visibility = View.VISIBLE\r\n            binding.navbar.viewLogout.visibility = View.VISIBLE\r\n            binding.navbar.rlLogout.setOnClickListener {\r\n                closeDrawer()\r\n                showLogout()\r\n//           binding.drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_OPEN)\r\n           binding.drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED)\r\n\r\n            }\r\n\r\n\r\n            binding.navbar.rlSavedEvents.setOnClickListener {\r\n                setCurrentFragment(savedEventFragment, \"SavedEventFragment\")\r\n                closeDrawer()\r\n            }\r\n            binding.navbar.rlBookingHistory.setOnClickListener {\r\n                setCurrentFragment(bookingHistoryFragment, \"BookingHistoryFragment\")\r\n                closeDrawer()\r\n            }\r\n\r\n\r\n            if (!sharedPreferences.getBoolean(Constants.Is_AgoraRegistered,false)) {\r\n                signUp()\r\n            }\r\n            else {\r\n                getTokenFromAppServer(NEW_LOGIN)\r\n            }\r\n        } else {\r\n            Toast.makeText(this, \"User Not Logged in\", Toast.LENGTH_SHORT).show()\r\n            Log.e(\"Audience Id\", audience_id)\r\n            Log.e(\"Bearer\", authorization)\r\n            binding.navbar.rlLogout.visibility = View.INVISIBLE\r\n            binding.navbar.viewLogout.visibility = View.INVISIBLE\r\n            binding.drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED)\r\n\r\n        }\r\n\r\n\r\n        onBackPressedDispatcher.addCallback( this@MainActivity, object : OnBackPressedCallback(true) {\r\n            override fun handleOnBackPressed() {\r\n\r\n                try {\r\n                    if (supportFragmentManager.fragments.size > 1 && (supportFragmentManager?.findFragmentByTag(\r\n                            \"MarketPlaceFragment\"\r\n                        )?.isVisible == false)\r\n                    ) {\r\n\r\n                        val fragmentManager = supportFragmentManager\r\n                        val backStackCount = fragmentManager.backStackEntryCount\r\n                        if (fragmentManager.backStackEntryCount > 0)\r\n                            fragmentManager.popBackStackImmediate()\r\n                        else\r\n                            onBackPressedDispatcher.onBackPressed()\r\n//                        for (i in 0 until backStackCount) {\r\n//                            val backStackEntry: FragmentManager.BackStackEntry =\r\n//                                fragmentManager.getBackStackEntryAt(backStackCount)\r\n//                            if (!backStackEntry.getName().equals(\"MarketPlaceFragment\")) {\r\n//                                fragmentManager.popBackStackImmediate(\r\n//                                    backStackEntry.getId(),\r\n//                                    FragmentManager.POP_BACK_STACK_INCLUSIVE\r\n//                                )\r\n//                            }\r\n//                        }\r\n//                var fragmentToKeep =\r\n//                    this.supportFragmentManager.findFragmentByTag(\"MarketPlaceFragment\")!! as MarketPlaceFragment\r\n//                val transaction: FragmentTransaction =\r\n//                    this.supportFragmentManager.beginTransaction()\r\n//\r\n//                if (fragmentToKeep != null) {\r\n//                    transaction.detach(fragmentToKeep)\r\n//                } else {\r\n//                    fragmentToKeep = MarketPlaceFragment()\r\n//                }\r\n//\r\n//                for (fragment in supportFragmentManager.fragments) {\r\n//                    if (fragment != null && fragment !== fragmentToKeep) {\r\n//                        transaction.remove(fragment)\r\n//                    }\r\n//                }\r\n//\r\n//                transaction.addToBackStack(null)\r\n//                transaction.commit()\r\n                    } else {\r\n                        val builder1 = AlertDialog.Builder(this@MainActivity)\r\n                            .setMessage(\"Do you want to exit ?\")\r\n                            .setTitle(\"Alert !\")\r\n                            .setPositiveButton(\"Yes\") { dialog, id ->\r\n//                                super.onBackPressed()\r\n                                System.exit(0)\r\n                            }\r\n                            .setNegativeButton(\"No\") { dialog, id ->\r\n                                dialog.cancel()\r\n                            }\r\n\r\n\r\n                        builder1.create().show()\r\n                    }\r\n                } catch (ex: Exception) {\r\n                    ex.printStackTrace()\r\n                    supportFragmentManager.beginTransaction()\r\n                        .add(R.id.flFragment, MarketPlaceFragment(), \"MarketPlaceFragment\").commit()\r\n                }\r\n            }\r\n\r\n        })\r\n\r\n//        this.supportFragmentManager.addOnBackStackChangedListener {\r\n//            if (supportFragmentManager.findFragmentByTag(\"MarketPlaceFragment\")?.isVisible == true) {\r\n//\r\n//            } else if (supportFragmentManager.findFragmentByTag(\"CreateFragment\")?.isVisible == true) {\r\n//\r\n//            } else if (supportFragmentManager.findFragmentByTag(\"ConnectFragment\")?.isVisible == true) {\r\n//\r\n//            } else if (supportFragmentMan ager.findFragmentByTag(\"WalletFragment\")?.isVisible == true) {\r\n//\r\n//            } else {\r\n//\r\n//            }\r\n//        }\r\n\r\n\r\n    }\r\n\r\n\r\n    private fun requestPermissions() {\r\n        checkPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE, 110)\r\n    }\r\n\r\n    private fun initSDK() {\r\n        val options = ChatOptions()\r\n        // Set your appkey applied from Agora Console\r\n        val sdkAppkey = getString(R.string.app_key_chats)\r\n        if (TextUtils.isEmpty(sdkAppkey)) {\r\n            Toast.makeText(\r\n                this@MainActivity,\r\n                \"You should set your AppKey first!\",\r\n                Toast.LENGTH_SHORT\r\n            ).show()\r\n            return\r\n        }\r\n        // Set your appkey to options\r\n        options.appKey = sdkAppkey\r\n        // Set whether confirmation of delivery is required by the recipient. Default: false\r\n        options.requireDeliveryAck = true\r\n        // Set not to log in automatically\r\n        options.autoLogin = false\r\n        // Use UI Samples to initialize Chat SDK\r\n        EaseUIKit.getInstance().init(this, options)\r\n        // Make Chat SDK debuggable\r\n        ChatClient.getInstance().setDebugMode(true)\r\n    }\r\n\r\n    private fun addConnectionListener() {\r\n        connectionListener = object : ConnectionListener {\r\n            override fun onConnected() {}\r\n            override fun onDisconnected(error: Int) {\r\n                if (error == Error.USER_REMOVED) {\r\n                    onUserException(\"account_removed\")\r\n                } else if (error == Error.USER_LOGIN_ANOTHER_DEVICE) {\r\n                    onUserException(\"account_conflict\")\r\n                } else if (error == Error.SERVER_SERVICE_RESTRICTED) {\r\n                    onUserException(\"account_forbidden\")\r\n                } else if (error == Error.USER_KICKED_BY_CHANGE_PASSWORD) {\r\n                    onUserException(\"account_kicked_by_change_password\")\r\n                } else if (error == Error.USER_KICKED_BY_OTHER_DEVICE) {\r\n                    onUserException(\"account_kicked_by_other_device\")\r\n                } else if (error == Error.USER_BIND_ANOTHER_DEVICE) {\r\n                    onUserException(\"user_bind_another_device\")\r\n                } else if (error == Error.USER_DEVICE_CHANGED) {\r\n                    onUserException(\"user_device_changed\")\r\n                } else if (error == Error.USER_LOGIN_TOO_MANY_DEVICES) {\r\n                    onUserException(\"user_login_too_many_devices\")\r\n                }\r\n                else {\r\n                    onUserException(error.toString())\r\n                }\r\n            }\r\n\r\n            override fun onTokenExpired() {\r\n                //login again\r\n                getTokenFromAppServer(NEW_LOGIN)\r\n                Log.d(Constants.TAG_CHAT, \"ConnectionListener onTokenExpired\")\r\n//                LogUtils.showLog(binding.tvLog, \"ConnectionListener onTokenExpired\")\r\n            }\r\n\r\n            override fun onTokenWillExpire() {\r\n                getTokenFromAppServer(RENEW_TOKEN)\r\n                Log.d(Constants.TAG_CHAT, \"ConnectionListener onTokenWillExpire\")\r\n            }\r\n        }\r\n        // Call removeConnectionListener(connectionListener) when the activity is destroyed\r\n        ChatClient.getInstance().addConnectionListener(connectionListener)\r\n    }\r\n\r\n    fun signUp() {\r\n        if (TextUtils.isEmpty(username) || TextUtils.isEmpty(pwd)) {\r\n//            LogUtils.showErrorToast(this, binding.tvLog, getString(R.string.username_or_pwd_miss))\r\n            Log.d(Constants.TAG_CHAT, \"signUp: getString(R.string.username_or_pwd_miss)\")\r\n            return\r\n        }\r\n        execute {\r\n            try {\r\n                val headers: MutableMap<String, String> =\r\n                    HashMap()\r\n                headers[\"Content-Type\"] = \"application/json\"\r\n                val request = JSONObject()\r\n                request.putOpt(\"userAccount\", username)\r\n                request.putOpt(\"userPassword\", pwd)\r\n                Log.d(Constants.TAG_CHAT, \"begin to signUp...\")\r\n//                LogUtils.showErrorLog(binding.tvLog, \"begin to signUp...\")\r\n                val response = HttpClientManager.httpExecute(\r\n                    REGISTER_URL,\r\n                    headers,\r\n                    request.toString(),\r\n                    HttpClientManager.Method_POST\r\n                )\r\n                val code = response.code\r\n                val responseInfo = response.content\r\n                if (code == 200) {\r\n                    sharedPreferences.edit().putBoolean(Constants.Is_AgoraRegistered,true).apply()\r\n                    if (responseInfo != null && responseInfo.length > 0) {\r\n                        val `object` = JSONObject(responseInfo)\r\n                        val resultCode = `object`.getString(\"code\")\r\n                        if (resultCode == \"RES_OK\") {\r\n                            Log.d(Constants.TAG_CHAT, getString(R.string.sign_up_success))\r\n//                            LogUtils.showToast(\r\n//                                this@MainActivity,\r\n//                                binding.tvLog,\r\n//                                getString(R.string.sign_up_success)\r\n//                            )\r\n                        } else {\r\n                            val errorInfo = `object`.getString(\"errorInfo\")\r\n                            Log.d(Constants.TAG_CHAT, errorInfo)\r\n//                            LogUtils.showErrorLog(binding.tvLog, errorInfo)\r\n                        }\r\n                    } else {\r\n                        Log.d(Constants.TAG_CHAT, responseInfo)\r\n//                        LogUtils.showErrorLog(binding.tvLog, responseInfo)\r\n                    }\r\n                    getTokenFromAppServer(NEW_LOGIN)\r\n                } else {\r\n                    if (code >= 400 && code < 500) {\r\n                        sharedPreferences.edit().putBoolean(Constants.Is_AgoraRegistered, true)\r\n                            .apply()\r\n                        getTokenFromAppServer(NEW_LOGIN)\r\n                    }\r\n                    Log.d(Constants.TAG_CHAT, responseInfo)\r\n//                    LogUtils.showErrorLog(binding.tvLog, responseInfo)\r\n                    sharedPreferences.edit().putBoolean(Constants.Is_AgoraRegistered,false).apply()\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                Log.d(Constants.TAG_CHAT, e.message.toString())\r\n//                LogUtils.showErrorLog(binding.tvLog, e.message)\r\n            }\r\n        }\r\n    }\r\n    private fun getTokenFromAppServer(requestType: String) {\r\n        if (ChatClient.getInstance().options.autoLogin && ChatClient.getInstance().isLoggedInBefore) {\r\n//            LogUtils.showErrorLog(binding.tvLog, getString(R.string.has_login_before))\r\n            Log.d(Constants.TAG_CHAT, getString(R.string.has_login_before))\r\n            return\r\n        }\r\n//        val pwd = (findViewById<View>(R.id.et_pwd) as EditText).text.toString().trim { it <= ' ' }\r\n        if (TextUtils.isEmpty(username) || TextUtils.isEmpty(pwd)) {\r\n        Log.d(Constants.TAG_CHAT, getString(R.string.username_or_pwd_miss))\r\n//            LogUtils.showErrorToast(\r\n//                this@MainActivity,\r\n//                binding.tvLog,\r\n//                getString(R.string.username_or_pwd_miss)\r\n//            )\r\n        return\r\n    }\r\n        this.runOnUiThread {\r\n            try {\r\n                val headers: MutableMap<String, String> =\r\n                    HashMap()\r\n                headers[\"Content-Type\"] = \"application/json\"\r\n                val request = JSONObject()\r\n                request.putOpt(\"userAccount\", username)\r\n                request.putOpt(\"userPassword\", pwd)\r\n                Log.d(Constants.TAG_CHAT, \"begin to getTokenFromAppServer ...\")\r\n//                LogUtils.showErrorLog(binding.tvLog, \"begin to getTokenFromAppServer ...\")\r\n                val response = HttpClientManager.httpExecute(\r\n                    LOGIN_URL,\r\n                    headers,\r\n                    request.toString(),\r\n                    HttpClientManager.Method_POST\r\n                )\r\n                val code = response.code\r\n                val responseInfo = response.content\r\n                if (code == 200) {\r\n                    if (responseInfo != null && responseInfo.length > 0) {\r\n                        val `object` = JSONObject(responseInfo)\r\n                        val token = `object`.getString(\"accessToken\")\r\n                        if (TextUtils.equals(\r\n                                requestType,\r\n                                NEW_LOGIN\r\n                            )\r\n                        ) {\r\n                            ChatClient.getInstance()\r\n                                .loginWithAgoraToken(username, token, object : CallBack {\r\n                                    override fun onSuccess() {\r\n                                        Log.d(Constants.TAG_CHAT, getString(R.string.sign_in_success))\r\n                                        Toast.makeText(this@MainActivity, getString(R.string.sign_in_success), Toast.LENGTH_SHORT).show()\r\n\r\n                                    }\r\n\r\n                                    override fun onError(code: Int, error: String) {\r\n//                                        LogUtils.showErrorToast(\r\n//                                            this@MainActivity,\r\n//                                            binding.tvLog,\r\n//                                            \"Login failed! code: $code error: $error\"\r\n//                                        )\r\n\r\n                                        Toast.makeText(this@MainActivity, \"Login failed! code: $code error: $error\", Toast.LENGTH_SHORT).show()\r\n                                        Log.d(Constants.TAG_CHAT, \"Login failed! code: $code error: $error\")\r\n                                    }\r\n\r\n                                    override fun onProgress(\r\n                                        progress: Int,\r\n                                        status: String\r\n                                    ) {\r\n                                    }\r\n                                })\r\n                        } else if (TextUtils.equals(\r\n                                requestType,\r\n                                RENEW_TOKEN\r\n                            )\r\n                        ) {\r\n                            ChatClient.getInstance().renewToken(token)\r\n                        }\r\n                    } else {\r\n                        Log.d(Constants.TAG_CHAT, \"getTokenFromAppServer failed! code: $code error: $responseInfo\")\r\n//                        LogUtils.showErrorToast(\r\n//                            this@MainActivity,\r\n//                            binding.tvLog,\r\n//                            \"getTokenFromAppServer failed! code: $code error: $responseInfo\"\r\n//                        )\r\n                    }\r\n                } else {\r\n                    Log.d(Constants.TAG_CHAT, \"getTokenFromAppServer failed! code: $code error: $responseInfo\")\r\n//                    LogUtils.showErrorToast(\r\n//                        this@MainActivity,\r\n//                        binding.tvLog,\r\n//                        \"getTokenFromAppServer failed! code: $code error: $responseInfo\"\r\n//                    )\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n                Log.d(Constants.TAG_CHAT, \"getTokenFromAppServer failed! code: \" + 0 + \" error: \" + e.message)\r\n//                LogUtils.showErrorToast(\r\n//                    this@MainActivity,\r\n//                    binding.tvLog,\r\n//                    \"getTokenFromAppServer failed! code: \" + 0 + \" error: \" + e.message\r\n//                )\r\n            }\r\n        }\r\n}\r\n\r\n    fun onUserException(exception: String) {\r\n//        LogUtils.showLog(binding.tvLog, \"onUserException: $exception\")\r\n        Log.d(Constants.TAG_CHAT, \"onUserException: $exception\")\r\n        ChatClient.getInstance().logout(false, null)\r\n    }\r\n\r\n    fun execute(runnable: Runnable?) {\r\n        Thread(runnable).start()\r\n    }\r\n\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        if (connectionListener != null) {\r\n            ChatClient.getInstance().removeConnectionListener(connectionListener)\r\n        }\r\n    }\r\n\r\n    private fun checkPermissions(permission: String, requestCode: Int): Boolean {\r\n        PermissionsManager.instance?.let {\r\n            if (!it.hasPermission(this, permission)) {\r\n                it.requestPermissions(this, arrayOf<String>(permission), requestCode)\r\n                return false\r\n            }\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    private fun setCurrentFragment(fragment: Fragment, fragmetsTag: String) =\r\n        supportFragmentManager.beginTransaction().apply {\r\n            replace(R.id.flFragment, fragment, fragmetsTag)\r\n            addToBackStack(fragmetsTag)\r\n            commit()\r\n        }\r\n\r\n    private fun closeDrawer() {\r\n        if (binding.drawerLayout.isDrawerOpen(GravityCompat.END)) {\r\n            binding.drawerLayout.closeDrawers()\r\n        }\r\n    }\r\n\r\n\r\n    private fun isLocationPermissionGranted(): Boolean {\r\n        return if (ActivityCompat.checkSelfPermission(\r\n                this,\r\n                android.Manifest.permission.ACCESS_COARSE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\r\n                this,\r\n                android.Manifest.permission.ACCESS_FINE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            ActivityCompat.requestPermissions(\r\n                this,\r\n                arrayOf(\r\n                    android.Manifest.permission.ACCESS_FINE_LOCATION,\r\n                    android.Manifest.permission.ACCESS_COARSE_LOCATION\r\n                ),\r\n                requestcode\r\n            )\r\n            false\r\n        } else {\r\n            true\r\n        }\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n//        if(requestCode == LOCATION_PERMISSION_REQUEST_CODE)\r\n//        {\r\n//            if( grantResults.isNotEmpty() )\r\n//                if(  grantResults[0].equals(PackageManager.PERMISSION_GRANTED) ||\r\n//                    grantResults[1].equals(PackageManager.PERMISSION_GRANTED)   )\r\n//                {\r\n//                    GetLocation()\r\n//                }\r\n//        }\r\n    }\r\n\r\n\r\n    private fun getProfileApi() {\r\n//        binding.progressDialog.visibility = View.VISIBLE\r\n        try {\r\n            ApiClient.getInstance()!!.getProfile(authorization, audience_id)\r\n                .enqueue(object : retrofit2.Callback<AudienceDataResponse> {\r\n                    override fun onResponse(\r\n                        call: Call<AudienceDataResponse>,\r\n                        response: Response<AudienceDataResponse>\r\n                    ) {\r\n//                binding.progressDialog.visibility = View.GONE\r\n                        if (response.isSuccessful && response.body() != null) {\r\n                            Log.d(\r\n                                \"Profile Api\",\r\n                                \"onResponse Retrofit Profile Data: \" + response.body()\r\n                            )\r\n                            val res = response.body()\r\n\r\n                            var item: AudienceDataResponse = res!!\r\n\r\n                            binding.navbar.tvCustName.text = res!!.fullName\r\n\r\n                            binding.navbar.llNavDetails.setOnClickListener {\r\n                                closeDrawer()\r\n                                val intent =\r\n                                    Intent(this@MainActivity, AudienceProfileActivity::class.java)\r\n                                intent.putExtra(\"item\", item as Serializable)\r\n                                startActivity(intent)\r\n                            }\r\n\r\n                            if (!res.profile_pic.isNullOrEmpty())\r\n                                Glide.with(this@MainActivity).load(res.profile_pic)\r\n                                    .into(binding.navbar.ivProfileImage)\r\n                        }\r\n                    }\r\n\r\n                    override fun onFailure(call: Call<AudienceDataResponse>, t: Throwable) {\r\n//                binding.progressDialog.visibility = View.GONE\r\n                        Log.d(\"Profile Api\", \"onFailure Retrofit: \" + t.localizedMessage)\r\n\r\n\r\n                    }\r\n\r\n                })\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n\r\n    private fun showLogout() {\r\n        val builder1 = AlertDialog.Builder(this)\r\n            .setMessage(\"Do you want to Logout from your account ?\")\r\n            .setTitle(\"Alert !\")\r\n            .setPositiveButton(\"Yes\") { dialog, id ->\r\n                sharedPreferences.edit().putBoolean(Constants.isUserTypeRegistered, false).apply()\r\n                sharedPreferences.edit().putString(Constants.Authorization, \"\").apply()\r\n                sharedPreferences.edit().putString(Constants.AudienceId, \"\").apply()\r\n                binding.navbar.rlLogout.visibility = View.GONE\r\n                dialog.cancel()\r\n                finish()\r\n                val intent = Intent(this, MainActivity::class.java)\r\n                startActivity(intent)\r\n            }\r\n            .setNegativeButton(\"No\") { dialog, id ->\r\n                dialog.cancel()\r\n            }\r\n\r\n        builder1.create().show()\r\n\r\n    }\r\n\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        exitCount = 0\r\n        getProfileApi()\r\n    }\r\n\r\n\r\n    //    override fun onBackPressed() {\r\n////        this.supportFragmentManager.findFragmentByTag(\"MarketPlaceFragment\")?.id?.let {\r\n////        supportFragmentManager.inTransaction {\r\n////\r\n////            popBackStack(\r\n////                it, FragmentManager.POP_BACK_STACK_INCLUSIVE)\r\n////\r\n////            replace(R.id.container, newFragment, \"NewFragment\")\r\n////        }\r\n//        val builder1 = AlertDialog.Builder(this)\r\n//            .setMessage(\"Do you want to exit ?\")\r\n//            .setTitle(\"Alert !\")\r\n//            .setPositiveButton(\"Yes\") { dialog, id ->\r\n//                super.onBackPressed()\r\n//                System.exit(0)\r\n//            }\r\n//            .setNegativeButton(\"No\") { dialog, id ->\r\n//                dialog.cancel()\r\n//            }\r\n//\r\n//        builder1.create().show()\r\n//    }\r\n    override fun onBackPressed() {\r\n//        this.supportFragmentManager.findFragmentByTag(\"MarketPlaceFragment\")?.id?.let {\r\n//        supportFragmentManager.inTransaction {\r\n//\r\n//            popBackStack(\r\n//                it, FragmentManager.POP_BACK_STACK_INCLUSIVE)\r\n//\r\n//            replace(R.id.container, newFragment, \"NewFragment\")\r\n//        }\r\n\r\n        try {\r\n            if (this.supportFragmentManager.fragments.size > 1 && (this.supportFragmentManager?.findFragmentByTag(\r\n                    \"MarketPlaceFragment\"\r\n                )?.isVisible == false)\r\n            ) {\r\n\r\n                val fragmentManager = this.supportFragmentManager\r\n                val backStackCount = fragmentManager.backStackEntryCount\r\n                for (i in 0 until backStackCount) {\r\n                    val backStackEntry: FragmentManager.BackStackEntry =\r\n                        fragmentManager.getBackStackEntryAt(i)\r\n                    if (!backStackEntry.getName().equals(\"MarketPlaceFragment\")) {\r\n                        fragmentManager.popBackStackImmediate(\r\n                            backStackEntry.getId(),\r\n                            FragmentManager.POP_BACK_STACK_INCLUSIVE\r\n                        )\r\n                    }\r\n                }\r\n//                var fragmentToKeep =\r\n//                    this.supportFragmentManager.findFragmentByTag(\"MarketPlaceFragment\")!! as MarketPlaceFragment\r\n//                val transaction: FragmentTransaction =\r\n//                    this.supportFragmentManager.beginTransaction()\r\n//\r\n//                if (fragmentToKeep != null) {\r\n//                    transaction.detach(fragmentToKeep)\r\n//                } else {\r\n//                    fragmentToKeep = MarketPlaceFragment()\r\n//                }\r\n//\r\n//                for (fragment in supportFragmentManager.fragments) {\r\n//                    if (fragment != null && fragment !== fragmentToKeep) {\r\n//                        transaction.remove(fragment)\r\n//                    }\r\n//                }\r\n//\r\n//                transaction.addToBackStack(null)\r\n//                transaction.commit()\r\n            } else {\r\n                val builder1 = AlertDialog.Builder(this)\r\n                    .setMessage(\"Do you want to exit ?\")\r\n                    .setTitle(\"Alert !\")\r\n                    .setPositiveButton(\"Yes\") { dialog, id ->\r\n                        super.onBackPressed()\r\n                        System.exit(0)\r\n                    }\r\n                    .setNegativeButton(\"No\") { dialog, id ->\r\n                        dialog.cancel()\r\n                    }\r\n\r\n\r\n                builder1.create().show()\r\n            }\r\n        } catch (ex: Exception) {\r\n            ex.printStackTrace()\r\n            this.supportFragmentManager.beginTransaction()\r\n                .add(R.id.flFragment, MarketPlaceFragment(), \"MarketPlaceFragment\").commit()\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dev/frequenc/ui_codes/MainActivity.kt b/app/src/main/java/com/dev/frequenc/ui_codes/MainActivity.kt
--- a/app/src/main/java/com/dev/frequenc/ui_codes/MainActivity.kt	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/app/src/main/java/com/dev/frequenc/ui_codes/MainActivity.kt	(date 1702018323151)
@@ -119,12 +119,12 @@
 
 
         try {
-//            sharedPreferences.edit().putString(Constants.User_Id, username)
-//                .apply()
-            val generatedUsername = sharedPreferences.getString(Constants.User_Id, null).toString()
-            val mob_no = sharedPreferences.getString(Constants.PhoneNo, null)
-            pwd= username!!.substring(generatedUsername!!.lastIndex-5, generatedUsername!!.lastIndex) + "@" + mob_no!!.substring(mob_no.lastIndex-5, mob_no.lastIndex)
-            username = generatedUsername
+            sharedPreferences.edit().putString(Constants.User_Id, username)
+                .apply()
+//            val generatedUsername = sharedPreferences.getString(Constants.User_Id, null).toString()
+//            val mob_no = sharedPreferences.getString(Constants.PhoneNo, null)
+//            pwd= username!!.substring(generatedUsername!!.lastIndex-5, generatedUsername!!.lastIndex) + "@" + mob_no!!.substring(mob_no.lastIndex-5, mob_no.lastIndex)
+//            username = generatedUsername
         }
         catch (e: Exception) { e.printStackTrace()}
 
Index: app/src/main/java/com/dev/frequenc/ui_codes/connect/chat/ChatFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dev.frequenc.ui_codes.connect.chat\r\n\r\nimport android.Manifest\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\nimport android.os.AsyncTask.execute\r\nimport android.os.Bundle\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport com.dev.agorademo2.PermissionsManager\r\nimport com.dev.frequenc.R\r\nimport com.dev.frequenc.ui_codes.util.ApiChatClient\r\nimport com.dev.frequenc.ui_codes.util.CommonUtils\r\nimport com.dev.frequenc.ui_codes.util.Constants\r\nimport com.dev.frequenc.ui_codes.util.KeysConstant\r\nimport io.agora.chat.ChatClient\r\nimport io.agora.chat.ChatMessage\r\nimport io.agora.chat.Conversation\r\nimport io.agora.chat.uikit.chat.EaseChatFragment\r\nimport io.agora.chat.uikit.chat.interfaces.OnChatExtendMenuItemClickListener\r\nimport io.agora.chat.uikit.chat.interfaces.OnMessageSendCallBack\r\nimport io.agora.chat.uikit.menu.EaseChatType\r\nimport io.agora.cloud.HttpClientManager\r\nimport retrofit2.Call\r\n\r\n\r\nclass ChatFragment : Fragment() {\r\n\r\n    private lateinit var shearedPreference: SharedPreferences\r\n    private var toChatUsername: String = \"mwr\"\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        val view: View = inflater.inflate(R.layout.fragment_chat, container, false)\r\n        try {\r\n            shearedPreference = this.activity?.getSharedPreferences(Constants.SharedPreference, Context.MODE_PRIVATE) as SharedPreferences\r\n            toChatUsername = shearedPreference.getString(Constants.User_Id, null).toString()\r\n//            toChatUsername = activity?.intent?.getStringExtra(Constants.Messaged_user).toString()\r\n        }\r\n        catch (ex: Exception) {\r\n\r\n        }\r\n\r\n        startChat(view)\r\n        return view\r\n    }\r\n\r\n\r\n    private fun checkPermissions(permission: String, requestCode: Int): Boolean {\r\n        PermissionsManager.instance?.let {\r\n            if (!it.hasPermission(activity, permission)) {\r\n                it.requestPermissions(activity, arrayOf<String>(permission), requestCode)\r\n                return false\r\n            }\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    private fun requestPermissions() {\r\n        checkPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE, 110)\r\n    }\r\n\r\n\r\n    private fun startChat(view: View) {\r\n\r\n        // check username\r\n        if (TextUtils.isEmpty(toChatUsername)) {\r\n            Log.d(Constants.TAG_CHAT, getString(R.string.not_find_send_name))\r\n//            LogUtils.showErrorToast(this, binding.tvLog, getString(R.string.not_find_send_name))\r\n            return\r\n        }\r\n        // 1: single chat; 2: group chat; 3: chat room\r\n        val fragment = EaseChatFragment.Builder(toChatUsername, EaseChatType.SINGLE_CHAT)\r\n            .useHeader(false)\r\n            .setOnChatExtendMenuItemClickListener(OnChatExtendMenuItemClickListener { view, itemId ->\r\n                if (itemId == io.agora.chat.uikit.R.id.extend_item_take_picture) {\r\n                    return@OnChatExtendMenuItemClickListener !checkPermissions(\r\n                        Manifest.permission.CAMERA,\r\n                        111\r\n                    )\r\n                } else if (itemId == io.agora.chat.uikit.R.id.extend_item_picture || itemId == io.agora.chat.uikit.R.id.extend_item_file || itemId == io.agora.chat.uikit.R.id.extend_item_video) {\r\n                    return@OnChatExtendMenuItemClickListener !checkPermissions(\r\n                        Manifest.permission.READ_EXTERNAL_STORAGE,\r\n                        112\r\n                    )\r\n                }\r\n                false\r\n            })\r\n            .setOnChatRecordTouchListener { v, event ->\r\n                !checkPermissions(\r\n                    Manifest.permission.RECORD_AUDIO,\r\n                    113\r\n                )\r\n            }\r\n            .setOnMessageSendCallBack(object : OnMessageSendCallBack {\r\n                override fun onSuccess(message: ChatMessage) {\r\n                    Log.d(Constants.TAG_CHAT, \"Send success: message type: \" + message.type.name)\r\n//                    LogUtils.showLog(binding.tvLog, \"Send success: message type: \" + message.type.name)\r\n                }\r\n\r\n                override fun onError(code: Int, errorMsg: String) {\r\n                    Log.d(Constants.TAG_CHAT, \"Send failed: error code: $code errorMsg: $errorMsg\")\r\n//                    LogUtils.showErrorLog(\r\n//                        binding.tvLog,\r\n//                        \"Send failed: error code: $code errorMsg: $errorMsg\"\r\n//                    )\r\n                }\r\n            })\r\n            .build()\r\n        activity?.supportFragmentManager?.beginTransaction()?.replace(R.id.chat_flfragment, fragment)?.commit()\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dev/frequenc/ui_codes/connect/chat/ChatFragment.kt b/app/src/main/java/com/dev/frequenc/ui_codes/connect/chat/ChatFragment.kt
--- a/app/src/main/java/com/dev/frequenc/ui_codes/connect/chat/ChatFragment.kt	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/app/src/main/java/com/dev/frequenc/ui_codes/connect/chat/ChatFragment.kt	(date 1702018420096)
@@ -41,7 +41,7 @@
         val view: View = inflater.inflate(R.layout.fragment_chat, container, false)
         try {
             shearedPreference = this.activity?.getSharedPreferences(Constants.SharedPreference, Context.MODE_PRIVATE) as SharedPreferences
-            toChatUsername = shearedPreference.getString(Constants.User_Id, null).toString()
+//            toChatUsername = shearedPreference.getString(Constants.User_Id, null).toString()
 //            toChatUsername = activity?.intent?.getStringExtra(Constants.Messaged_user).toString()
         }
         catch (ex: Exception) {
Index: app/src/main/java/com/dev/frequenc/ui_codes/screens/ViewAllTrendingEvents/ViewAllTrendingEvents.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dev.frequenc.ui_codes.screens.ViewAllTrendingEvents\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport com.dev.frequenc.ui_codes.data.TrendingEventsResponse\r\nimport com.dev.frequenc.databinding.ActivityViewAllTrendingEventsBinding\r\nimport com.dev.frequenc.ui_codes.screens.Adapter.TrendingEventAdapterold\r\nimport com.dev.frequenc.ui_codes.screens.EventDetail.EventDetailActivity\r\nimport com.dev.frequenc.ui_codes.util.Constants\r\n\r\nclass ViewAllTrendingEvents : AppCompatActivity(),TrendingEventAdapterViewAll.ListAdapterListener {\r\n\r\n    lateinit var binding : ActivityViewAllTrendingEventsBinding\r\n    lateinit var authorization : String\r\n    lateinit var audience_id : String\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n    var userRegistered : Boolean = false\r\n    var isLogin = false\r\n    lateinit var search : String\r\n    lateinit var trendingEventAdapterViewAll : TrendingEventAdapterViewAll\r\n    lateinit var mList : List<TrendingEventsResponse>\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n\r\n        binding = ActivityViewAllTrendingEventsBinding.inflate(layoutInflater)\r\n\r\n        setContentView(binding.root)\r\n\r\n        mList = intent.getSerializableExtra(\"list\") as List<TrendingEventsResponse>\r\n\r\n        binding.ivBackBtn.setOnClickListener { onBackPressedDispatcher.onBackPressed() }\r\n\r\n        sharedPreferences = getSharedPreferences(Constants.SharedPreference, Context.MODE_PRIVATE)!!\r\n        userRegistered = sharedPreferences.getBoolean(Constants.isUserTypeRegistered, false)\r\n        authorization =  sharedPreferences.getString(Constants.Authorization, \"-1\").toString()\r\n        audience_id = sharedPreferences.getString(Constants.AudienceId,\"-1\").toString()\r\n\r\n        if(userRegistered && !authorization.isNullOrEmpty() &&authorization!=\"-1\" && !audience_id.isNullOrEmpty() )\r\n        {\r\n\r\n            Log.d(\"Audience Id\",audience_id)\r\n            Log.d(\"Bearer\",authorization)\r\n\r\n            isLogin =true\r\n\r\n        }\r\n        else\r\n        {\r\n            Log.e(\"Audience Id\",audience_id)\r\n            isLogin = false\r\n        }\r\n\r\n\r\n        binding.etSearch.addTextChangedListener(object : TextWatcher {\r\n\r\n            override fun afterTextChanged(s: Editable) {\r\n\r\n\r\n            }\r\n\r\n            override fun beforeTextChanged(s: CharSequence, start: Int,\r\n                                           count: Int, after: Int) {\r\n            }\r\n\r\n            override fun onTextChanged(s: CharSequence, start: Int,\r\n                                       before: Int, count: Int) {\r\n                search = s.toString()\r\n                if(search!=null)\r\n                    if(mList!=null && trendingEventAdapterViewAll!=null)\r\n                    {\r\n                        filter(search)\r\n                    }\r\n//                       mlistener.searchDish(search)\r\n            }\r\n        })\r\n\r\n\r\n        trendingEventAdapterViewAll = TrendingEventAdapterViewAll(mList,this@ViewAllTrendingEvents, isLogin)\r\n        binding.rvViewAll.apply {\r\n            layoutManager = GridLayoutManager(this@ViewAllTrendingEvents,2,\r\n                GridLayoutManager.VERTICAL,false)\r\n            adapter = trendingEventAdapterViewAll\r\n        }\r\n\r\n        binding.ivSearchAppBar.setOnClickListener {\r\n\r\n            binding.rlSearch.visibility = View.VISIBLE\r\n            binding.ivSearchAppBar.visibility =View.GONE\r\n\r\n        }\r\n\r\n        binding.ivSearch.setOnClickListener {\r\n            binding.rlSearch.visibility = View.GONE\r\n            binding.ivSearchAppBar.visibility =View.VISIBLE\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    override fun onClickAtCard(item: TrendingEventsResponse) {\r\n        val intent = Intent(this, EventDetailActivity::class.java)\r\n        val bundle = Bundle()\r\n        bundle.putString(\"eventid\",item._id)\r\n        Log.d(\"eventid\",item._id)\r\n        intent.putExtras(bundle)\r\n        startActivity(intent)\r\n    }\r\n\r\n    override fun onClickAtBookmark(item: TrendingEventsResponse) {\r\n\r\n    }\r\n\r\n    fun filter(text: String) {\r\n        val temp: ArrayList<TrendingEventsResponse> = java.util.ArrayList()\r\n        for (d in mList) {\r\n            //or use .equal(text) with you want equal match\r\n            //use .toLowerCase() for better matches\r\n            if (d.eventTitle!!.contains(text, ignoreCase = true)\r\n\r\n                ) {\r\n\r\n                temp.add(d)\r\n            }\r\n        }\r\n        //update recyclerview\r\n        if(trendingEventAdapterViewAll!=null) {\r\n            trendingEventAdapterViewAll!!.updateList(temp)\r\n        }\r\n    }\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dev/frequenc/ui_codes/screens/ViewAllTrendingEvents/ViewAllTrendingEvents.kt b/app/src/main/java/com/dev/frequenc/ui_codes/screens/ViewAllTrendingEvents/ViewAllTrendingEvents.kt
--- a/app/src/main/java/com/dev/frequenc/ui_codes/screens/ViewAllTrendingEvents/ViewAllTrendingEvents.kt	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/app/src/main/java/com/dev/frequenc/ui_codes/screens/ViewAllTrendingEvents/ViewAllTrendingEvents.kt	(date 1702016960824)
@@ -8,6 +8,7 @@
 import android.text.Editable
 import android.text.TextWatcher
 import android.util.Log
+import android.view.View
 import androidx.recyclerview.widget.GridLayoutManager
 import com.dev.frequenc.ui_codes.data.TrendingEventsResponse
 import com.dev.frequenc.databinding.ActivityViewAllTrendingEventsBinding
@@ -35,7 +36,6 @@
         setContentView(binding.root)
 
         mList = intent.getSerializableExtra("list") as List<TrendingEventsResponse>
-
         binding.ivBackBtn.setOnClickListener { onBackPressedDispatcher.onBackPressed() }
 
         sharedPreferences = getSharedPreferences(Constants.SharedPreference, Context.MODE_PRIVATE)!!
Index: app/src/main/java/com/dev/frequenc/ui_codes/screens/Profile/Intro1Activity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dev.frequenc.ui_codes.screens.Profile\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport com.bumptech.glide.Glide\r\nimport com.dev.frequenc.R\r\nimport com.dev.frequenc.databinding.ActivityIntro1Binding\r\nimport com.dev.frequenc.ui_codes.MainActivity\r\nimport com.dev.frequenc.util.Constants\r\n\r\nclass Intro1Activity : AppCompatActivity() {\r\n\r\n    lateinit var binding : ActivityIntro1Binding\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        binding = ActivityIntro1Binding.inflate(layoutInflater)\r\n\r\n        setContentView(binding.root)\r\n\r\n        Glide.with(this).load(R.drawable.frequenc_loader).into(binding.ivAnimSplash)\r\n\r\n        sharedPreferences = getSharedPreferences(Constants.SharedPreference, Context.MODE_PRIVATE)!!\r\n\r\n\r\n\r\n        binding.btnContinue.setOnClickListener {\r\n            val intent = Intent(this, MainActivity::class.java)\r\n            startActivity(intent)\r\n            sharedPreferences.edit().putBoolean(\r\n                Constants.isFirst_Time_User,\r\n                false\r\n            ).apply()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dev/frequenc/ui_codes/screens/Profile/Intro1Activity.kt b/app/src/main/java/com/dev/frequenc/ui_codes/screens/Profile/Intro1Activity.kt
--- a/app/src/main/java/com/dev/frequenc/ui_codes/screens/Profile/Intro1Activity.kt	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/app/src/main/java/com/dev/frequenc/ui_codes/screens/Profile/Intro1Activity.kt	(date 1702016630828)
@@ -9,7 +9,7 @@
 import com.dev.frequenc.R
 import com.dev.frequenc.databinding.ActivityIntro1Binding
 import com.dev.frequenc.ui_codes.MainActivity
-import com.dev.frequenc.util.Constants
+import com.dev.frequenc.ui_codes.util.Constants
 
 class Intro1Activity : AppCompatActivity() {
 
Index: app/src/main/java/com/dev/frequenc/ui_codes/screens/ViewAllTrendingEvents/TrendingEventAdapterViewAll.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dev.frequenc.ui_codes.screens.ViewAllTrendingEvents\r\n\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.RelativeLayout\r\nimport android.widget.TextView\r\nimport androidx.constraintlayout.widget.ConstraintLayout\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport com.dev.frequenc.R\r\nimport com.dev.frequenc.ui_codes.data.TrendingEventsResponse\r\nimport com.dev.frequenc.ui_codes.screens.Adapter.TrendingEventAdapter\r\nimport com.dev.frequenc.util.AppCommonMethods\r\nimport com.dev.frequenc.util.Constants\r\n\r\nclass TrendingEventAdapterViewAll (private var mList: List<TrendingEventsResponse>,\r\n                                   mListener: ListAdapterListener, val isLogin : Boolean\r\n) : RecyclerView.Adapter<TrendingEventAdapterViewAll.ViewHolder> (){\r\n\r\n    lateinit var mContext : Context\r\n    private var mListener = mListener\r\n\r\n    lateinit var authorization : String\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n    interface ListAdapterListener{\r\n        fun onClickAtCard(item : TrendingEventsResponse)\r\n        fun onClickAtBookmark(item : TrendingEventsResponse)\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n\r\n        val view = LayoutInflater.from(parent.context)\r\n            .inflate(R.layout.layout_recycler_trending_event_viewall, parent, false)\r\n\r\n        mContext = parent.context\r\n\r\n        sharedPreferences = mContext.getSharedPreferences(Constants.SharedPreference, Context.MODE_PRIVATE)!!\r\n        authorization =  sharedPreferences.getString(Constants.Authorization, \"-1\").toString()\r\n\r\n\r\n        return ViewHolder(view)\r\n\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n        val item = mList!![position]\r\n\r\n        Glide.with(mContext)\r\n            .load(item!!.eventImage[0])\r\n            .into(holder.imageView )\r\n\r\n        holder.textView.setText(item.eventTitle)\r\n\r\n        holder.tvEventDate.setText(\r\n            AppCommonMethods.convertDateFormat2(\r\n                \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"dd MMM yyyy\",item.eventStartDate))\r\n        holder.tvTrendingEventType.setText(item.category + \" Events\")\r\n\r\n//        if(!item.venueDetails.venue_locality.isNullOrEmpty())\r\n//          holder.tvLocation.setText(item.venueDetails.venue_locality)\r\n//        else if(!item.venueDetails.venue_name.isNullOrEmpty())\r\n//          holder.tvLocation.setText(item.venueDetails.venue_name)\r\n//        else if(!item.venueDetails.address.isNullOrEmpty())\r\n//            holder.tvLocation.setText(item.country)\r\n\r\n        holder.cardView.setOnClickListener {  mListener.onClickAtCard(item) }\r\n\r\n        if(isLogin)\r\n        {\r\n            if(item.is_bookmark)\r\n            {\r\n                holder.rlBookmark.visibility = View.GONE\r\n            }\r\n            else\r\n            {\r\n                holder.rlBookmark.visibility = View.VISIBLE\r\n            }\r\n        }\r\n        else\r\n        {\r\n            holder.rlBookmark.visibility = View.GONE\r\n        }\r\n\r\n\r\n//        holder.tvLocation.text = item.venueDetails.venue_locality\r\n\r\n        holder.rlBookmark.setOnClickListener {\r\n            if(!authorization.isNullOrEmpty() &&authorization!=\"-1\"  )\r\n            {\r\n                holder.rlBookmark.visibility = View.GONE\r\n            }\r\n            mListener.onClickAtBookmark(item) }\r\n\r\n    }\r\n\r\n\r\n    override fun getItemCount(): Int {\r\n        return mList!!.size\r\n    }\r\n\r\n    fun updateList(list: List<TrendingEventsResponse>) {\r\n        mList = list\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n\r\n    class ViewHolder(ItemView: View) : RecyclerView.ViewHolder(ItemView) {\r\n        val imageView: ImageView = itemView.findViewById(R.id.ivTrendingEvent)\r\n        val textView: TextView = itemView.findViewById(R.id.tvTrendingEventName)\r\n        val tvLocation: TextView = itemView.findViewById(R.id.tvLocation)\r\n        val tvTrendingEventType: TextView = itemView.findViewById(R.id.tvTrendingEventType)\r\n        val tvEventDate: TextView = itemView.findViewById(R.id.tvTrendingEventTime)\r\n        val cardView : ConstraintLayout = itemView.findViewById(R.id.cvRv)\r\n        val rlBookmark : RelativeLayout = itemView.findViewById(R.id.rlBookMark)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dev/frequenc/ui_codes/screens/ViewAllTrendingEvents/TrendingEventAdapterViewAll.kt b/app/src/main/java/com/dev/frequenc/ui_codes/screens/ViewAllTrendingEvents/TrendingEventAdapterViewAll.kt
--- a/app/src/main/java/com/dev/frequenc/ui_codes/screens/ViewAllTrendingEvents/TrendingEventAdapterViewAll.kt	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/app/src/main/java/com/dev/frequenc/ui_codes/screens/ViewAllTrendingEvents/TrendingEventAdapterViewAll.kt	(date 1702016765388)
@@ -15,7 +15,7 @@
 import com.dev.frequenc.ui_codes.data.TrendingEventsResponse
 import com.dev.frequenc.ui_codes.screens.Adapter.TrendingEventAdapter
 import com.dev.frequenc.util.AppCommonMethods
-import com.dev.frequenc.util.Constants
+import com.dev.frequenc.ui_codes.util.Constants
 
 class TrendingEventAdapterViewAll (private var mList: List<TrendingEventsResponse>,
                                    mListener: ListAdapterListener, val isLogin : Boolean
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
new file mode 100644
--- /dev/null	(date 1702016289286)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1702016289286)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="deploymentTargetDropDown">
+    <value>
+      <entry key="app">
+        <State />
+      </entry>
+    </value>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"jbr-17\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n            <option value=\"$PROJECT_DIR$/metamask-android-sdk\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/.idea/gradle.xml	(date 1702017665522)
@@ -4,10 +4,8 @@
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
-        <option name="testRunner" value="GRADLE" />
-        <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="jbr-17" />
+        <option name="gradleJvm" value="#GRADLE_LOCAL_JAVA_HOME" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
@@ -15,6 +13,7 @@
             <option value="$PROJECT_DIR$/metamask-android-sdk" />
           </set>
         </option>
+        <option name="resolveExternalAnnotations" value="false" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/dev/frequenc/ui_codes/util/Constants.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dev.frequenc.ui_codes.util\r\n\r\nclass Constants {\r\n\r\n    companion object\r\n    {\r\n        val Is_AgoraRegistered: String = \"is_agoras\"\r\n        val User_Id: String = \"user_id\"\r\n        val Messaged_user: String = \"receivedUsr\"\r\n        const val MetaMaskWalletAddress = \"PublicAddress\"\r\n        const val AudienceId = \"_id\"\r\n        const val Authorization = \"Authorization\"\r\n        const val ApiError = \"ApiError\"\r\n        const val IS_LOGIN = \"IS_LOGIN\"\r\n        const val ApiResponse = \"ApiResponse\"\r\n        val _currentFragmentTag: String = \"0\"\r\n        val isUserTypeRegistered: String = \"user_type_registered\"\r\n        val isFirst_Time_User: String = \"isFirst_Time_User\"\r\n        val PhoneNo: String = \"phone\"\r\n        val Error: String = \"apierror\"\r\n        val Email: String = \"email\"\r\n        val SharedPreference: String = \"mySharePreference\"\r\n\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dev/frequenc/ui_codes/util/Constants.kt b/app/src/main/java/com/dev/frequenc/ui_codes/util/Constants.kt
--- a/app/src/main/java/com/dev/frequenc/ui_codes/util/Constants.kt	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/app/src/main/java/com/dev/frequenc/ui_codes/util/Constants.kt	(date 1702016539608)
@@ -19,6 +19,7 @@
         val PhoneNo: String = "phone"
         val Error: String = "apierror"
         val Email: String = "email"
+        val TAG_CHAT: String = "Chats"
         val SharedPreference: String = "mySharePreference"
 
     }
Index: app/src/main/java/com/dev/frequenc/ui_codes/connect/VibesProfileList/VibesUserListFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dev.frequenc.ui_codes.connect.VibesProfileList\r\n\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.ProgressBar\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.dev.frequenc.R\r\nimport com.dev.frequenc.ui_codes.MainActivity\r\nimport com.dev.frequenc.ui_codes.connect.Profile.ProfileFragment\r\nimport com.dev.frequenc.ui_codes.data.ConnectionResponse\r\nimport com.dev.frequenc.ui_codes.data.MatchVibeData\r\nimport com.dev.frequenc.ui_codes.data.MatchVibeListResponse\r\nimport com.dev.frequenc.ui_codes.data.QuoteResponse\r\nimport com.dev.frequenc.ui_codes.data.myconnection.Data\r\nimport com.dev.frequenc.ui_codes.data.myconnection.MyConnectionResponse\r\nimport com.dev.frequenc.ui_codes.screens.utils.ApiClient\r\nimport com.dev.frequenc.ui_codes.util.Constants\r\nimport io.agora.chat.ChatClient\r\nimport pl.droidsonroids.gif.GifImageView\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\n// TODO: Rename parameter arguments, choose names that match\r\n// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\r\nprivate const val ARG_PARAM1 = \"param1\"\r\nprivate const val ARG_PARAM2 = \"param2\"\r\n\r\n/**\r\n * A simple [Fragment] subclass.\r\n * Use the [VibesUserListFragment.newInstance] factory method to\r\n * create an instance of this fragment.\r\n */\r\nclass VibesUserListFragment : Fragment(), VibesProfileListAdapter.ListAdapterListener,\r\n    ConnectionAdapter.ListAdapterListener {\r\n    // TODO: Rename and change types of parameters\r\n    private var param1: String? = null\r\n    private var param2: String? = null\r\n    lateinit var root: View\r\n    lateinit var rvVibeUser: RecyclerView\r\n    lateinit var rvConnection: RecyclerView\r\n    lateinit var rvQuote: RecyclerView\r\n    lateinit var category: String\r\n    lateinit var tvConnectionTag: TextView\r\n\r\n    lateinit var authorization: String\r\n    lateinit var audience_id: String\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n    var userRegistered: Boolean = false\r\n    lateinit var progressDialog: ProgressBar\r\n\r\n    lateinit var ivHamburger : ImageView\r\n    lateinit var ivAnim : GifImageView\r\n    lateinit var tvVibeTag : TextView\r\n    lateinit var ivHamburger: ImageView\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        arguments?.let {\r\n            param1 = it.getString(ARG_PARAM1)\r\n            param2 = it.getString(ARG_PARAM2)\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        root = inflater.inflate(R.layout.fragment_vibes_user_list, container, false)\r\n\r\n        ivHamburger = root.findViewById(R.id.ivHamburger)\r\n        rvVibeUser = root.findViewById(R.id.rvVibeUser)\r\n        rvConnection = root.findViewById(R.id.rvConnection)\r\n        rvQuote = root.findViewById(R.id.rvQuote)\r\n        tvVibeTag = root.findViewById(R.id.tvVibeTag)\r\n        ivAnim = root.findViewById(R.id.ivAnimSplashConnct)\r\n\r\n        tvConnectionTag = root.findViewById<TextView>(R.id.tvConnectionTag)\r\n\r\n        val bundle = this.arguments\r\n        if (bundle != null) {\r\n            category = bundle.getString(\"category\").toString()\r\n            Log.d(\"category\", category)\r\n            tvVibeTag.text = category\r\n\r\n        }\r\n\r\n        progressDialog = root.findViewById(R.id.progress_bar)\r\n        sharedPreferences =\r\n            activity?.getSharedPreferences(Constants.SharedPreference, Context.MODE_PRIVATE)!!\r\n        userRegistered = sharedPreferences.getBoolean(Constants.isUserTypeRegistered, false)\r\n        authorization = sharedPreferences.getString(Constants.Authorization, \"-1\").toString()\r\n        audience_id = sharedPreferences.getString(Constants.AudienceId, \"-1\").toString()\r\n\r\n\r\n        callConnectionApi(authorization)\r\n\r\n\r\n        Glide.with(requireContext()).asGif().load(R.drawable.frequenc_loader).into(ivAnim)\r\n\r\n\r\n        if (userRegistered && !authorization.isNullOrEmpty() && authorization != \"-1\" && !audience_id.isNullOrEmpty()) {\r\n\r\n            Log.d(\"Audience Id\", audience_id)\r\n            Log.d(\"Bearer\", authorization)\r\n//            Toast.makeText(requireContext(),\"Login Success\", Toast.LENGTH_SHORT).show()\r\n//            loginBtn.visibility = View.INVISIBLE\r\n//            ivHamburger.visibility =View.VISIBLE\r\n//            ivNotification.visibility =View.VISIBLE\r\n\r\n            getMatchUserList(category)\r\n//            getMatchUserList(\"Party\")\r\n\r\n            ivHamburger.setOnClickListener {\r\n                (activity as MainActivity).binding.drawerLayout.openDrawer(GravityCompat.END)\r\n            }\r\n\r\n        } else {\r\n\r\n            Log.e(\"Audience Id\", audience_id)\r\n//            loginBtn.visibility = View.VISIBLE\r\n//            ivHamburger.visibility =View.INVISIBLE\r\n//            ivNotification.visibility =View.INVISIBLE\r\n\r\n\r\n//            Log.e(\"Bearer\",authorization)\r\n        }\r\n\r\n\r\n        return root\r\n    }\r\n\r\n    companion object {\r\n        /**\r\n         * Use this factory method to create a new instance of\r\n         * this fragment using the provided parameters.\r\n         *\r\n         * @param param1 Parameter 1.\r\n         * @param param2 Parameter 2.\r\n         * @return A new instance of fragment VibesUserListFragment.\r\n         */\r\n        // TODO: Rename and change types and number of parameters\r\n        @JvmStatic\r\n        fun newInstance(param1: String, param2: String) =\r\n            VibesUserListFragment().apply {\r\n                arguments = Bundle().apply {\r\n                    putString(ARG_PARAM1, param1)\r\n                    putString(ARG_PARAM2, param2)\r\n                }\r\n            }\r\n    }\r\n\r\n    override fun onClickAtProfile(item: MatchVibeData) {\r\n\r\n\r\n        try {\r\n            ChatClient.getInstance().contactManager().addContact(item.id, \"connect\")\r\n        } catch (ex: Exception) {\r\n            ex.printStackTrace()\r\n        }\r\n\r\n        val profile = ProfileFragment()\r\n\r\n        Toast.makeText(requireContext(), \"Profile Clicked\", Toast.LENGTH_SHORT).show()\r\n        requireActivity().supportFragmentManager.beginTransaction()\r\n            .replace(R.id.flFragment, profile).addToBackStack(\"ProfileFragment\").commit()\r\n\r\n        val bundle = Bundle()\r\n        bundle.putString(\"audience_id\", item._id)\r\n        profile.arguments = bundle\r\n    }\r\n\r\n    override fun onClickAtConnection(item: ConnectionResponse) {\r\n        Toast.makeText(requireContext(), \"Connection Clicked\", Toast.LENGTH_SHORT).show()\r\n\r\n    }\r\n\r\n    private fun getMatchUserList(category: String) {\r\n        ApiClient.getInstance()!!.getMatchVibeList(authorization, category)!!\r\n            .enqueue(object : retrofit2.Callback<MatchVibeListResponse> {\r\n                override fun onResponse(\r\n                    call: Call<MatchVibeListResponse>,\r\n                    response: Response<MatchVibeListResponse>\r\n                ) {\r\n                    if (response.isSuccessful && response.body() != null) {\r\n                        val mlist = response.body()!!.data\r\n\r\n                        rvVibeUser.apply {\r\n                            layoutManager = GridLayoutManager(\r\n                                requireContext(),\r\n                                2,\r\n                                GridLayoutManager.VERTICAL,\r\n                                false\r\n                            )\r\n                            adapter = VibesProfileListAdapter(mlist, this@VibesUserListFragment)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                override fun onFailure(call: Call<MatchVibeListResponse>, t: Throwable) {\r\n                    Toast.makeText(requireContext(), t.localizedMessage, Toast.LENGTH_SHORT).show()\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    fun callConnectionApi(token: String) {\r\n\r\n        Log.d(\"flow\", \"Connection Api Called\")\r\n\r\n        ApiClient.getInstance()?.connectionList(token)\r\n            ?.enqueue(object : Callback<MyConnectionResponse> {\r\n                override fun onResponse(\r\n                    call: Call<MyConnectionResponse>,\r\n                    response: Response<MyConnectionResponse>\r\n                ) {\r\n                    if (response.isSuccessful) {\r\n                        if (response.body() != null && response.body()?.data != null) {\r\n\r\n                            Log.d(\"flow\", \"Connection Api Success\")\r\n\r\n\r\n                            val count = response.body()!!.count\r\n\r\n                            tvConnectionTag.text = \"Connection ($count)\"\r\n\r\n                            if (count == 0) {\r\n                                rvConnection.visibility = View.GONE\r\n                                rvQuote.visibility = View.VISIBLE\r\n                                Toast.makeText(requireContext(),\"No Connection\",Toast.LENGTH_SHORT).show()\r\n                                getQuotes()\r\n\r\n\r\n                            } else {\r\n                                rvConnection.visibility = View.VISIBLE\r\n                                rvQuote.visibility = View.GONE\r\n\r\n                                val adapterLists = ArrayList<ConnectionResponse>()\r\n\r\n                                for (data: Data in response.body()?.data!!) {\r\n                                    var images: String = \"\"\r\n                                    try {\r\n                                        images = data.from_user_id.audience_id.profile_pic\r\n                                    } catch (exs: Exception) {\r\n                                        exs.printStackTrace()\r\n                                    }\r\n                                    adapterLists.add(ConnectionResponse(images, data.to_user_id.fullName.toString(), data.id))\r\n\r\n                                }\r\n\r\n\r\n                                rvConnection.apply {\r\n                                    adapter =\r\n                                        ConnectionAdapter(adapterLists, ArrayList<Boolean>(adapterLists.size),this@VibesUserListFragment)\r\n                                    layoutManager = LinearLayoutManager(\r\n                                        requireContext(),\r\n                                        LinearLayoutManager.HORIZONTAL,\r\n                                        false\r\n                                    )\r\n\r\n                                }\r\n                            }\r\n\r\n\r\n//                            _userLists.postValue(adapterLists)\r\n                        } else {\r\n//                            _userLists.postValue(emptyList())\r\n                        }\r\n                    } else {\r\n                        Log.d(Constants.Error, \"onResponse: ${response.body()}\")\r\n                    }\r\n                }\r\n\r\n                override fun onFailure(call: Call<MyConnectionResponse>, t: Throwable) {\r\n                    Log.e(Constants.Error, \"onFailure: \", t)\r\n                    Log.d(\"flow\", \"Connection Api Error\")\r\n\r\n                }\r\n            })\r\n    }\r\n\r\n    private fun getQuotes() {\r\n        Log.d(\"api\", \"calling get quotes api\")\r\n        ApiClient.getInstance()!!.getQuoteApi()!!\r\n            .enqueue(object : retrofit2.Callback<QuoteResponse> {\r\n                override fun onResponse(\r\n                    call: Call<QuoteResponse>,\r\n                    response: Response<QuoteResponse>\r\n                ) {\r\n                    if (response.isSuccessful) {\r\n                        if (response.body() != null && response.body()!!.data != null) {\r\n\r\n                            Log.d(\"api\",\"response success get quotes\")\r\n\r\n                            val mData = response.body()!!\r\n\r\n//                            Log.d(\"api\",mData.data.get(0).name)\r\n\r\n\r\n                            for(i in mData.data)\r\n                             Log.d(\"api\",i.name.toString())\r\n\r\n                            rvQuote.apply {\r\n                                adapter = QuoteAdapter(mData)\r\n                                layoutManager = LinearLayoutManager(\r\n                                    requireContext(),\r\n                                    LinearLayoutManager.HORIZONTAL,\r\n                                    false\r\n                                )\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                override fun onFailure(call: Call<QuoteResponse>, t: Throwable) {\r\n                    Toast.makeText(requireContext(),t.localizedMessage,Toast.LENGTH_SHORT).show()\r\n                }\r\n            })\r\n\r\n\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dev/frequenc/ui_codes/connect/VibesProfileList/VibesUserListFragment.kt b/app/src/main/java/com/dev/frequenc/ui_codes/connect/VibesProfileList/VibesUserListFragment.kt
--- a/app/src/main/java/com/dev/frequenc/ui_codes/connect/VibesProfileList/VibesUserListFragment.kt	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/app/src/main/java/com/dev/frequenc/ui_codes/connect/VibesProfileList/VibesUserListFragment.kt	(date 1702016587630)
@@ -16,6 +16,7 @@
 import androidx.recyclerview.widget.GridLayoutManager
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
 import com.dev.frequenc.R
 import com.dev.frequenc.ui_codes.MainActivity
 import com.dev.frequenc.ui_codes.connect.Profile.ProfileFragment
@@ -61,8 +62,12 @@
     var userRegistered: Boolean = false
     lateinit var progressDialog: ProgressBar
 
-    lateinit var ivHamburger : ImageView
-    lateinit var ivAnim : GifImageView
+    private lateinit var _ivAnim: GifImageView
+    var ivAnim : GifImageView
+        get() = _ivAnim
+        set(value) {
+            _ivAnim = value
+        }
     lateinit var tvVibeTag : TextView
     lateinit var ivHamburger: ImageView
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" project-jdk-name=\"jbr-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/.idea/misc.xml	(date 1702017568026)
@@ -1,3 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="jbr-17" project-jdk-type="JavaSDK">
Index: app/src/main/java/com/dev/frequenc/ui_codes/data/UpdateAgoraDetailResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dev/frequenc/ui_codes/data/UpdateAgoraDetailResponse.kt b/app/src/main/java/com/dev/frequenc/ui_codes/data/UpdateAgoraDetailResponse.kt
new file mode 100644
--- /dev/null	(date 1702016712672)
+++ b/app/src/main/java/com/dev/frequenc/ui_codes/data/UpdateAgoraDetailResponse.kt	(date 1702016712672)
@@ -0,0 +1,6 @@
+package com.dev.frequenc.ui_codes.data
+
+data class UpdateAgoraDetailResponse(
+    val message: String,
+    val status: Boolean
+)
\ No newline at end of file
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <uses-feature\r\n        android:name=\"android.hardware.camera\"\r\n        android:required=\"false\" />\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" /> <!-- <uses-permission android:name=\"android.permission.INTERNET\" /> -->\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /> <!-- <uses-permission android:name=\"android.permission.CAMERA\"/> -->\r\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\r\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\" /> <!-- For Android 12, you need to add the following line to apply for the alarm clock permission. For Agora Chat 1.0.9 or later, this permission is optional. -->\r\n    <uses-permission android:name=\"android.permission.SCHEDULE_EXACT_ALARM\" />\r\n\r\n\r\n\r\n    <application\r\n        android:name=\".MetaMaskDappApplication\"\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:enableOnBackInvokedCallback=\"true\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@drawable/app_icon\"\r\n        android:label=\"@string/app_name\"\r\n        android:networkSecurityConfig=\"@xml/network_security_config\"\r\n        android:roundIcon=\"@drawable/app_icon\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/MyTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        tools:remove=\"android:appComponentFactory\"\r\n        tools:targetApi=\"31\">\r\n        <activity\r\n            android:name=\".ui_codes.screens.Profile.Intro1Activity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.intro.PresentationActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.intro.IntroduceYourselfActivity\"\r\n            android:exported=\"false\"\r\n            android:windowSoftInputMode=\"adjustResize\" />\r\n        <activity\r\n            android:name=\".ui_codes.connect.Profile.EditProfileActivity\"\r\n            android:exported=\"false\" />\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.maps.v2.API_KEY\"\r\n            android:value=\"AIzaSyDsM6E-cbYvtlgdoKO_79zzlm9G2gErlNE\" />\r\n\r\n        <activity\r\n            android:name=\".ui_codes.screens.Stripe.StripePaymentActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"false\"\r\n            android:label=\"@string/app_name\"\r\n            android:theme=\"@style/Theme.MetaMaskAndroidSDKClient\">\r\n        <activity\r\n                android:name=\".ui_codes.screens.Stripe.StripePaymentActivity\"\r\n                android:exported=\"false\" />\r\n<!--        <activity-->\r\n<!--                android:name=\".ui_codes.connect.home.ConnectHomeActivity\"-->\r\n<!--                android:exported=\"false\" />-->\r\n        <activity\r\n                android:name=\".MainActivity\"\r\n                android:exported=\"false\"\r\n                android:label=\"@string/app_name\"\r\n                android:theme=\"@style/Theme.MetaMaskAndroidSDKClient\">\r\n\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".ui_codes.screens.PaymentDetail.PaymentDetailActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.Profile.AudienceProfileActivity\"\r\n            android:exported=\"false\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.SelectTicket.SelectTicketActivity\"\r\n            android:exported=\"false\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.ViewAllCategory.ViewAllCategoryActivity\"\r\n            android:exported=\"false\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\" />\r\n        <activity\r\n                android:name=\".ui_codes.screens.ViewAllCategory.ViewAllCategoryActivity\"\r\n                android:exported=\"false\"\r\n                android:theme=\"@style/Theme.Material3.Light.NoActionBar\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.ViewAllAll.ViewAllAllActivity\"\r\n            android:exported=\"false\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.ViewAllTrendingArtist.ViewAllTrendingArtistActivity\"\r\n            android:exported=\"false\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.ViewAllTrendingEvents.ViewAllTrendingEvents\"\r\n            android:exported=\"false\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.notification.NotificationActivity\"\r\n            android:exported=\"false\"\r\n            android:theme=\"@style/Theme.AppCompat.NoActionBar\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.Search.SearchActivity\"\r\n            android:exported=\"false\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.SplashActivity\"\r\n            android:exported=\"true\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".ui_codes.MainActivity\"\r\n            android:exported=\"false\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\">\r\n            <meta-data\r\n                android:name=\"android.app.lib_name\"\r\n                android:value=\"\" />\r\n        </activity>\r\n        <activity\r\n            android:name=\".ui_codes.screens.login.LoginActivity\"\r\n            android:exported=\"false\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.ArtistDetail.ArtistDetailsActivity\"\r\n            android:exported=\"false\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.VenueDetail.VenueDetailActivity\"\r\n            android:exported=\"false\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\" />\r\n        <activity\r\n            android:name=\".ui_codes.screens.EventDetail.EventDetailActivity\"\r\n            android:exported=\"true\"\r\n            android:theme=\"@style/Theme.Material3.Light.NoActionBar\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.SEND\" />\r\n\r\n                <category android:name=\"android.intent.category.DEFAULT\" />\r\n\r\n                <data android:mimeType=\"text/plain\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/app/src/main/AndroidManifest.xml	(date 1702016463314)
@@ -61,22 +61,15 @@
             android:exported="false"
             android:label="@string/app_name"
             android:theme="@style/Theme.MetaMaskAndroidSDKClient">
-        <activity
-                android:name=".ui_codes.screens.Stripe.StripePaymentActivity"
-                android:exported="false" />
-<!--        <activity-->
-<!--                android:name=".ui_codes.connect.home.ConnectHomeActivity"-->
-<!--                android:exported="false" />-->
-        <activity
-                android:name=".MainActivity"
-                android:exported="false"
-                android:label="@string/app_name"
-                android:theme="@style/Theme.MetaMaskAndroidSDKClient">
-
             <meta-data
                 android:name="android.app.lib_name"
                 android:value="" />
         </activity>
+
+
+        <!--        <activity-->
+        <!--                android:name=".ui_codes.connect.home.ConnectHomeActivity"-->
+        <!--                android:exported="false" />-->
         <activity
             android:name=".ui_codes.screens.PaymentDetail.PaymentDetailActivity"
             android:exported="false" />
@@ -86,16 +79,12 @@
             android:theme="@style/Theme.Material3.Light.NoActionBar" />
         <activity
             android:name=".ui_codes.screens.SelectTicket.SelectTicketActivity"
-            android:exported="false"
-            android:theme="@style/Theme.Material3.Light.NoActionBar" />
-        <activity
-            android:name=".ui_codes.screens.ViewAllCategory.ViewAllCategoryActivity"
             android:exported="false"
             android:theme="@style/Theme.Material3.Light.NoActionBar" />
         <activity
-                android:name=".ui_codes.screens.ViewAllCategory.ViewAllCategoryActivity"
-                android:exported="false"
-                android:theme="@style/Theme.Material3.Light.NoActionBar" />
+            android:name=".ui_codes.screens.ViewAllCategory.ViewAllCategoryActivity"
+            android:exported="false"
+            android:theme="@style/Theme.Material3.Light.NoActionBar" />
         <activity
             android:name=".ui_codes.screens.ViewAllAll.ViewAllAllActivity"
             android:exported="false"
Index: app/src/main/res/layout/layout_recycler_share_vibes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:id=\"@+id/clCard\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\">\r\n\r\n    <androidx.cardview.widget.CardView\r\n            android:layout_width=\"@dimen/_135sdp\"\r\n            android:layout_height=\"@dimen/_135sdp\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            android:layout_margin=\"@dimen/_1sdp\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:cardCornerRadius=\"@dimen/_10sdp\"\r\n            >\r\n\r\n    <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\">\r\n\r\n            <com.google.android.material.imageview.ShapeableImageView\r\n                    android:id=\"@+id/ivImage\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:scaleType=\"fitXY\"\r\n                    android:src=\"@drawable/lookingforlove\"\r\n                    />\r\n\r\n            <RelativeLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:background=\"@drawable/bg_textview_connect\"\r\n                    />\r\n\r\n            <TextView\r\n                    android:id=\"@+id/tvTitle\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"FrequenC\"\r\n                    android:textColor=\"@color/offwhite\"\r\n                    android:layout_marginLeft=\"@dimen/_6sdp\"\r\n                    android:layout_marginRight=\"@dimen/_3sdp\"\r\n                    android:layout_marginBottom=\"@dimen/_10sdp\"\r\n                    android:textSize=\"@dimen/_12sdp\"\r\n                    android:maxLines=\"2\"\r\n                    android:ellipsize=\"end\"\r\n                    android:fontFamily=\"@font/epilogueregular\"\r\n                    android:textStyle=\"bold\"\r\n                    android:elevation=\"@dimen/_10sdp\"\r\n                    android:layout_marginBottom=\"@dimen/_10sdp\"\r\n                    android:paddingHorizontal=\"@dimen/_4sdp\"\r\n                    android:paddingVertical=\"@dimen/_2sdp\"\r\n                    android:layout_alignParentBottom=\"true\"\r\n                    />\r\n\r\n        </RelativeLayout>\r\n\r\n    </androidx.cardview.widget.CardView>\r\n\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/layout_recycler_share_vibes.xml b/app/src/main/res/layout/layout_recycler_share_vibes.xml
--- a/app/src/main/res/layout/layout_recycler_share_vibes.xml	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/app/src/main/res/layout/layout_recycler_share_vibes.xml	(date 1702016347026)
@@ -42,7 +42,6 @@
                     android:textColor="@color/offwhite"
                     android:layout_marginLeft="@dimen/_6sdp"
                     android:layout_marginRight="@dimen/_3sdp"
-                    android:layout_marginBottom="@dimen/_10sdp"
                     android:textSize="@dimen/_12sdp"
                     android:maxLines="2"
                     android:ellipsize="end"
Index: app/src/main/java/com/dev/frequenc/ui_codes/screens/SplashActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dev.frequenc.ui_codes.screens\r\n\r\nimport android.animation.AnimatorSet\r\nimport android.animation.ObjectAnimator\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.view.animation.AccelerateInterpolator\r\nimport android.widget.ImageView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.bumptech.glide.Glide\r\nimport com.dev.frequenc.R\r\nimport com.dev.frequenc.ui_codes.MainActivity\r\nimport com.dev.frequenc.ui_codes.screens.Profile.Intro1Activity\r\nimport com.dev.frequenc.util.Constants\r\nimport pl.droidsonroids.gif.GifImageView\r\n\r\nclass SplashActivity : AppCompatActivity() {\r\n\r\n    lateinit var gifImageView :  GifImageView\r\n\r\n    lateinit var ivLogoSplash : ImageView\r\n    private lateinit var sharedPreferences: SharedPreferences\r\n\r\n    var is_first_time : Boolean = false\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_splash)\r\n\r\n        gifImageView = findViewById<GifImageView>(R.id.ivAnimSplash)\r\n\r\n        ivLogoSplash = findViewById(R.id.ivLogoSplash)\r\n\r\n        sharedPreferences = getSharedPreferences(Constants.SharedPreference, Context.MODE_PRIVATE)!!\r\n\r\n        is_first_time = sharedPreferences.getBoolean(Constants.isFirst_Time_User, true)\r\n\r\n\r\n\r\n        ApplylrtocAnimationInSplash()\r\n        ApplylrtocAnimationInSplash2()\r\n\r\n\r\n        Glide.with(this)\r\n            .asGif()\r\n            .load(R.drawable.frequenc_loader) // Replace with the actual resource ID of your GIF\r\n            .into(gifImageView)\r\n\r\n\r\n\r\n        Handler().postDelayed({\r\n\r\n            if(is_first_time)\r\n            {\r\n                val intent = Intent(this, Intro1Activity::class.java)\r\n                startActivity(intent)\r\n                finish()\r\n            }\r\n            else\r\n            {\r\n                val intent = Intent(this, MainActivity::class.java)\r\n                startActivity(intent)\r\n                finish()\r\n            }\r\n\r\n        }, 3000)\r\n\r\n\r\n\r\n    }     // end of onCreate\r\n\r\n\r\n\r\n    private fun ApplylrtocAnimationInSplash() {\r\n        val halfWidth = (resources.displayMetrics.widthPixels / 2).toFloat()\r\n        val lTocAnim: ObjectAnimator = ObjectAnimator.ofFloat(\r\n            gifImageView ,\r\n            \"translationX\",\r\n            -halfWidth,\r\n            0f\r\n        )\r\n        lTocAnim.interpolator = AccelerateInterpolator()\r\n        lTocAnim.duration = 1000\r\n        val rTocAnim: ObjectAnimator = ObjectAnimator.ofFloat(\r\n            gifImageView,\r\n            \"translationX\",\r\n            halfWidth,\r\n            0f\r\n        )\r\n        rTocAnim.interpolator = AccelerateInterpolator()\r\n        rTocAnim.duration = 1000\r\n        val animatorSet = AnimatorSet()\r\n        animatorSet.playTogether(lTocAnim, rTocAnim)\r\n        animatorSet.start()\r\n    }\r\n\r\n    private fun ApplylrtocAnimationInSplash2() {\r\n\r\n        val halfWidth = (resources.displayMetrics.widthPixels / 2).toFloat()\r\n        val lTocAnim: ObjectAnimator = ObjectAnimator.ofFloat(\r\n            ivLogoSplash ,\r\n            \"translationX\",\r\n            -halfWidth,\r\n            0f\r\n        )\r\n        lTocAnim.interpolator = AccelerateInterpolator()\r\n        lTocAnim.duration = 1000\r\n        val rTocAnim: ObjectAnimator = ObjectAnimator.ofFloat(\r\n            ivLogoSplash,\r\n            \"translationX\",\r\n            halfWidth,\r\n            0f\r\n        )\r\n        rTocAnim.interpolator = AccelerateInterpolator()\r\n        rTocAnim.duration = 1000\r\n        val animatorSet = AnimatorSet()\r\n        animatorSet.playTogether(rTocAnim,lTocAnim)\r\n        animatorSet.start()\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/dev/frequenc/ui_codes/screens/SplashActivity.kt b/app/src/main/java/com/dev/frequenc/ui_codes/screens/SplashActivity.kt
--- a/app/src/main/java/com/dev/frequenc/ui_codes/screens/SplashActivity.kt	(revision cdbd6e02c5efa2d875a327b62f26e8eeb5c311e6)
+++ b/app/src/main/java/com/dev/frequenc/ui_codes/screens/SplashActivity.kt	(date 1702016765396)
@@ -14,7 +14,7 @@
 import com.dev.frequenc.R
 import com.dev.frequenc.ui_codes.MainActivity
 import com.dev.frequenc.ui_codes.screens.Profile.Intro1Activity
-import com.dev.frequenc.util.Constants
+import com.dev.frequenc.ui_codes.util.Constants
 import pl.droidsonroids.gif.GifImageView
 
 class SplashActivity : AppCompatActivity() {
